/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChangeEmail } from '../models';
// @ts-ignore
import { CreateEmployeeRequest } from '../models';
// @ts-ignore
import { CreateEmployeeRequestWork } from '../models';
// @ts-ignore
import { CurrencyValue } from '../models';
// @ts-ignore
import { Employee } from '../models';
// @ts-ignore
import { EmployeeFilter } from '../models';
// @ts-ignore
import { EmployeeTermination } from '../models';
// @ts-ignore
import { EmployeeTerminationNoticePeriod } from '../models';
// @ts-ignore
import { Employees } from '../models';
// @ts-ignore
import { EmployeesProfiles } from '../models';
// @ts-ignore
import { EmploymentEntries } from '../models';
// @ts-ignore
import { EmploymentEntry } from '../models';
// @ts-ignore
import { EquityEntries } from '../models';
// @ts-ignore
import { EquityEntry } from '../models';
// @ts-ignore
import { InvitationByWizard } from '../models';
// @ts-ignore
import { LifeCycleEntries } from '../models';
// @ts-ignore
import { PeopleUpdateEmployeeRecordRequest } from '../models';
// @ts-ignore
import { PeopleUpdateEmployeeRecordRequestAbout } from '../models';
// @ts-ignore
import { PeopleUpdateEmployeeRecordRequestPersonal } from '../models';
// @ts-ignore
import { ReadEmployeesRequestReference } from '../models';
// @ts-ignore
import { ReadSingleEmployeeRequestReference } from '../models';
// @ts-ignore
import { SalaryEntries } from '../models';
// @ts-ignore
import { SalaryEntry } from '../models';
// @ts-ignore
import { StartDateUpdate } from '../models';
// @ts-ignore
import { TrainingEntries } from '../models';
// @ts-ignore
import { TrainingEntry } from '../models';
// @ts-ignore
import { UploadAvatar } from '../models';
// @ts-ignore
import { VariableEntries } from '../models';
// @ts-ignore
import { VariableEntry } from '../models';
// @ts-ignore
import { WorkEntries } from '../models';
// @ts-ignore
import { WorkEntry } from '../models';
// @ts-ignore
import { WorkEntryAllOfReportsTo } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PeopleApi - axios parameter creator
 * @export
 */
export const PeopleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This creates a new employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields).  <br /><br><b>Note</b>
         * @summary Create company employee.
         * @param {CreateEmployeeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeRecord: async (body: CreateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createEmployeeRecord', 'body', body)
            const localVarPath = `/people`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new employment entry for a given employee.
         * @param {string} id employee id
         * @param {EmploymentEntry} entry Employment entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmploymentEntry: async (id: string, entry: EmploymentEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEmploymentEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createEmploymentEntry', 'entry', entry)
            const localVarPath = `/people/{id}/employment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {string} id Employee ID.
         * @param {EquityEntry} entry Equity grant to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquityGrant: async (id: string, entry: EquityEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEquityGrant', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createEquityGrant', 'entry', entry)
            const localVarPath = `/people/{id}/equities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {string} id Employee ID.
         * @param {SalaryEntry} entry Salary entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSalaryEntry: async (id: string, entry: SalaryEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createNewSalaryEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createNewSalaryEntry', 'entry', entry)
            const localVarPath = `/people/{id}/salaries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {string} id Employee ID.
         * @param {TrainingEntry} entry Training entry to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrainingRecord: async (id: string, entry: TrainingEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTrainingRecord', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createTrainingRecord', 'entry', entry)
            const localVarPath = `/people/{id}/training`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {string} id Employee ID.
         * @param {VariableEntry} entry Variable payment to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariablePayment: async (id: string, entry: VariableEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createVariablePayment', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createVariablePayment', 'entry', entry)
            const localVarPath = `/people/{id}/variable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new work entry for a given employee.
         * @param {string} id Employee ID.
         * @param {WorkEntry} entry Work entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkEntry: async (id: string, entry: WorkEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createWorkEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createWorkEntry', 'entry', entry)
            const localVarPath = `/people/{id}/work`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an employment entry from a given employee\'s employment history.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmploymentEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmploymentEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEmploymentEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/employment/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquityGrant: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEquityGrant', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEquityGrant', 'entryId', entryId)
            const localVarPath = `/people/{id}/equities/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSalaryEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteSalaryEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/salaries/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainingRecord', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteTrainingRecord', 'entryId', entryId)
            const localVarPath = `/people/{id}/variable/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord_1: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainingRecord_1', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteTrainingRecord_1', 'entryId', entryId)
            const localVarPath = `/people/{id}/training/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a work entry from a given employee\'s work history.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteWorkEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/work/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the avatar image URL of the employee.
         * @summary Read avatar for an employee ID.
         * @param {string} employeeId employee id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarUrl: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAvatarUrl', 'employeeId', employeeId)
            const localVarPath = `/avatars/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the avatar image URL of the logged-in user.<b>Supported user types:</b> Employee.
         * @summary Read avatar for logged-in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarUrl_2: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/my/avatar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the avatar image URL of the employee.
         * @summary Read avatar for an employee email
         * @param {string} [email] Employee email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailAvatar: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/avatars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s employment history.
         * @param {string} id employee id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmploymentHistory', 'id', id)
            const localVarPath = `/people/{id}/employment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSalaryHistory', 'id', id)
            const localVarPath = `/people/{id}/salaries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s work history
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWorkHistory', 'id', id)
            const localVarPath = `/people/{id}/work`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invite an employee with a welcome wizard ID.
         * @param {string} employeeId Employee ID.
         * @param {InvitationByWizard} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteEmployeeWizard: async (employeeId: string, body: InvitationByWizard, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('inviteEmployeeWizard', 'employeeId', employeeId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('inviteEmployeeWizard', 'body', body)
            const localVarPath = `/employees/{employeeId}/invitations`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{employeeId}/invitations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the public section of all  active employees of the logged-in user company.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value. Use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read the public profile section of all active employees.
         * @param {string} [sortBy] Optional field name to sort by. This defaults to firstName.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveEmployees: async (sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/profiles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s life-cycle status history.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeLifecycle: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEmployeeLifecycle', 'id', id)
            const localVarPath = `/people/{id}/lifecycle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/lifecycle',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>/people/search</b> (\"Search for employees\") instead. <br/><br/> This returns a list of all active employees. The data is filtered based on the access level of the logged-in user. Only viewable categories are returned.<br /><br> <b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read all company employees
         * @param {boolean} [showInactive] Should include inactive employees.
         * @param {boolean} [humanReadable] Whether to supply humanReadable values in JSON instead of machine-readable format (default).
         * @param {boolean} [includeHumanReadable] Whether to include the additional \&quot;humanReadable\&quot; JSON node in the response.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listEmployees: async (showInactive?: boolean, humanReadable?: boolean, includeHumanReadable?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/people`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (showInactive !== undefined) {
                localVarQueryParameter['showInactive'] = showInactive;
            }

            if (humanReadable !== undefined) {
                localVarQueryParameter['humanReadable'] = humanReadable;
            }

            if (includeHumanReadable !== undefined) {
                localVarQueryParameter['includeHumanReadable'] = includeHumanReadable;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquityGrants: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEquityGrants', 'id', id)
            const localVarPath = `/people/{id}/equities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrainingRecords: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTrainingRecords', 'id', id)
            const localVarPath = `/people/{id}/training`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablePayments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVariablePayments', 'id', id)
            const localVarPath = `/people/{id}/variable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>POST /people/{identifier}</b> (\"Read company employee fields by ID.\") instead. <br/><br/> Returns the employee by the specified ID.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read company employee by ID.
         * @param {string} identifier employee id
         * @param {Array<string>} fields Whether to supply fields (paths) instead of empty list as a default in order  to not exceed data permitted.
         * @param {boolean} [humanReadable] Whether to supply humanReadable values in JSON instead of machine-readable (default) format.
         * @param {boolean} [includeHumanReadable] Whether to include the additional \&quot;humanReadable\&quot; JSON node in the response.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        readEmployeeById: async (identifier: string, fields: Array<string>, humanReadable?: boolean, includeHumanReadable?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('readEmployeeById', 'identifier', identifier)
            // verify required parameter 'fields' is not null or undefined
            assertParamExists('readEmployeeById', 'fields', fields)
            const localVarPath = `/people/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (fields) {
                localVarQueryParameter['fields'] = fields;
            }

            if (humanReadable !== undefined) {
                localVarQueryParameter['humanReadable'] = humanReadable;
            }

            if (includeHumanReadable !== undefined) {
                localVarQueryParameter['includeHumanReadable'] = includeHumanReadable;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{identifier}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns the employee\'s fields by the specified ID or email.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read company employee fields by employee ID.
         * @param {string} identifier employee ID or email
         * @param {ReadSingleEmployeeRequestReference} [readSingleEmployeeRequestReference] Read request content that allows you to select fields and other options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmployeeFields: async (identifier: string, readSingleEmployeeRequestReference?: ReadSingleEmployeeRequestReference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('readEmployeeFields', 'identifier', identifier)
            const localVarPath = `/people/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: readSingleEmployeeRequestReference,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{identifier}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(readSingleEmployeeRequestReference, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke access to Bob for an employee.
         * @param {string} identifier employee id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToEmployee: async (identifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('revokeAccessToEmployee', 'identifier', identifier)
            const localVarPath = `/employees/{identifier}/uninvite`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{identifier}/uninvite',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This API returns a list of requested employees with requested fields.  The data is filtered based on the requested fields and access level of the logged-in user.  Only viewable categories are returned.<br /> <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Search for employees
         * @param {ReadEmployeesRequestReference} readEmployeesRequestReference Read request content that allows you to select fields and other options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmployees: async (readEmployeesRequestReference: ReadEmployeesRequestReference, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'readEmployeesRequestReference' is not null or undefined
            assertParamExists('searchEmployees', 'readEmployeesRequestReference', readEmployeesRequestReference)
            const localVarPath = `/people/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: readEmployeesRequestReference,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/search',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(readEmployeesRequestReference, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set or update an employee\'s start date.
         * @param {string} employeeId employee ID
         * @param {StartDateUpdate} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStartDate: async (employeeId: string, body: StartDateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('setStartDate', 'employeeId', employeeId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setStartDate', 'body', body)
            const localVarPath = `/employees/{employeeId}/start-date`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{employeeId}/start-date',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This changes the employee’s status to Terminated according to specified termination date. <br />
         * @summary Terminate company employee.
         * @param {string} identifier Employee ID.
         * @param {EmployeeTermination} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateEmployee: async (identifier: string, body: EmployeeTermination, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('terminateEmployee', 'identifier', identifier)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('terminateEmployee', 'body', body)
            const localVarPath = `/employees/{identifier}/terminate`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/employees/{identifier}/terminate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change an employee\'s email address. If you cannot change the self email an invitation will be sent to the new address to verify the email if the employee is invited/active.<br />
         * @summary Update an employee\'s email address.
         * @param {string} id employee id
         * @param {ChangeEmail} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail: async (id: string, body: ChangeEmail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmail', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEmail', 'body', body)
            const localVarPath = `/people/{id}/email`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/email',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This updates the employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields) where historical is equal to false.  <br /><br><b>Note</b>
         * @summary Update company employee.
         * @param {string} identifier Employee ID.
         * @param {PeopleUpdateEmployeeRecordRequest} body Use Fields Metadata API for available field definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeRecord: async (identifier: string, body: PeopleUpdateEmployeeRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('updateEmployeeRecord', 'identifier', identifier)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEmployeeRecord', 'body', body)
            const localVarPath = `/people/{identifier}`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier !== undefined ? identifier : `-identifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{identifier}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates an employment entry from a given employee\'s employment history.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to update.
         * @param {EmploymentEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentEntry: async (id: string, entryId: number, body: EmploymentEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmploymentEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEmploymentEntry', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEmploymentEntry', 'body', body)
            const localVarPath = `/people/{id}/employment/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {string} id Employee ID
         * @param {number} entryId The entry ID to update.
         * @param {EquityEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquityGrantForEmployee: async (id: string, entryId: number, body: EquityEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'body', body)
            const localVarPath = `/people/{id}/equities/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates a work entry from employee\'s work history
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to update.
         * @param {WorkEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkEntry: async (id: string, entryId: number, body: WorkEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateWorkEntry', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateWorkEntry', 'body', body)
            const localVarPath = `/people/{id}/work/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload an employee\'s Avatar by providing a URL to the image to upload.<br />
         * @summary Upload employee\'s avatar by image url
         * @param {string} employeeId Employee ID.
         * @param {UploadAvatar} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadEmployeeAvatarUrl: async (employeeId: string, body: UploadAvatar, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('uploadEmployeeAvatarUrl', 'employeeId', employeeId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('uploadEmployeeAvatarUrl', 'body', body)
            const localVarPath = `/avatars/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/avatars/{employeeId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleApi - functional programming interface
 * @export
 */
export const PeopleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleApiAxiosParamCreator(configuration)
    return {
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This creates a new employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields).  <br /><br><b>Note</b>
         * @summary Create company employee.
         * @param {PeopleApiCreateEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployeeRecord(requestParameters: PeopleApiCreateEmployeeRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const body: CreateEmployeeRequest = {
                firstName: requestParameters.firstName,
                surname: requestParameters.surname,
                email: requestParameters.email,
                work: requestParameters.work
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployeeRecord(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new employment entry for a given employee.
         * @param {PeopleApiCreateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmploymentEntry(requestParameters: PeopleApiCreateEmploymentEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: EmploymentEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmploymentEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {PeopleApiCreateEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquityGrant(requestParameters: PeopleApiCreateEquityGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: EquityEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquityGrant(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {PeopleApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSalaryEntry(requestParameters: PeopleApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: SalaryEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSalaryEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {PeopleApiCreateTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrainingRecord(requestParameters: PeopleApiCreateTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: TrainingEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrainingRecord(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {PeopleApiCreateVariablePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariablePayment(requestParameters: PeopleApiCreateVariablePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: VariableEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVariablePayment(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new work entry for a given employee.
         * @param {PeopleApiCreateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkEntry(requestParameters: PeopleApiCreateWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: WorkEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an employment entry from a given employee\'s employment history.
         * @param {PeopleApiDeleteEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmploymentEntry(requestParameters: PeopleApiDeleteEmploymentEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmploymentEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {PeopleApiDeleteEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquityGrant(requestParameters: PeopleApiDeleteEquityGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquityGrant(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {PeopleApiDeleteSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalaryEntry(requestParameters: PeopleApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalaryEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {PeopleApiDeleteTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainingRecord(requestParameters: PeopleApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainingRecord(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {PeopleApiDeleteTrainingRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainingRecord_1(requestParameters: PeopleApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainingRecord_1(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a work entry from a given employee\'s work history.
         * @param {PeopleApiDeleteWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkEntry(requestParameters: PeopleApiDeleteWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the avatar image URL of the employee.
         * @summary Read avatar for an employee ID.
         * @param {PeopleApiGetAvatarUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatarUrl(requestParameters: PeopleApiGetAvatarUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatarUrl(requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the avatar image URL of the logged-in user.<b>Supported user types:</b> Employee.
         * @summary Read avatar for logged-in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatarUrl_2(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatarUrl_2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the avatar image URL of the employee.
         * @summary Read avatar for an employee email
         * @param {PeopleApiGetEmailAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailAvatar(requestParameters: PeopleApiGetEmailAvatarRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailAvatar(requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s employment history.
         * @param {PeopleApiGetEmploymentHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmploymentHistory(requestParameters: PeopleApiGetEmploymentHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmploymentHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {PeopleApiGetSalaryHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalaryHistory(requestParameters: PeopleApiGetSalaryHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalaryHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s work history
         * @param {PeopleApiGetWorkHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkHistory(requestParameters: PeopleApiGetWorkHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invite an employee with a welcome wizard ID.
         * @param {PeopleApiInviteEmployeeWizardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteEmployeeWizard(requestParameters: PeopleApiInviteEmployeeWizardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: InvitationByWizard = {
                welcomeWizardId: requestParameters.welcomeWizardId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteEmployeeWizard(requestParameters.employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the public section of all  active employees of the logged-in user company.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value. Use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read the public profile section of all active employees.
         * @param {PeopleApiListActiveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listActiveEmployees(requestParameters: PeopleApiListActiveEmployeesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeesProfiles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listActiveEmployees(requestParameters.sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s life-cycle status history.
         * @param {PeopleApiListEmployeeLifecycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeLifecycle(requestParameters: PeopleApiListEmployeeLifecycleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifeCycleEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeLifecycle(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>/people/search</b> (\"Search for employees\") instead. <br/><br/> This returns a list of all active employees. The data is filtered based on the access level of the logged-in user. Only viewable categories are returned.<br /><br> <b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read all company employees
         * @param {PeopleApiListEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listEmployees(requestParameters: PeopleApiListEmployeesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employees>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployees(requestParameters.showInactive, requestParameters.humanReadable, requestParameters.includeHumanReadable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {PeopleApiListEquityGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEquityGrants(requestParameters: PeopleApiListEquityGrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquityEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEquityGrants(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {PeopleApiListTrainingRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrainingRecords(requestParameters: PeopleApiListTrainingRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrainingRecords(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {PeopleApiListVariablePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablePayments(requestParameters: PeopleApiListVariablePaymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablePayments(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>POST /people/{identifier}</b> (\"Read company employee fields by ID.\") instead. <br/><br/> Returns the employee by the specified ID.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read company employee by ID.
         * @param {PeopleApiReadEmployeeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async readEmployeeById(requestParameters: PeopleApiReadEmployeeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employees>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEmployeeById(requestParameters.identifier, requestParameters.fields, requestParameters.humanReadable, requestParameters.includeHumanReadable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns the employee\'s fields by the specified ID or email.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read company employee fields by employee ID.
         * @param {PeopleApiReadEmployeeFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEmployeeFields(requestParameters: PeopleApiReadEmployeeFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employees>> {
            const readSingleEmployeeRequestReference: ReadSingleEmployeeRequestReference = {
                fields: requestParameters.fields,
                humanReadable: requestParameters.humanReadable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEmployeeFields(requestParameters.identifier, readSingleEmployeeRequestReference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revoke access to Bob for an employee.
         * @param {PeopleApiRevokeAccessToEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeAccessToEmployee(requestParameters: PeopleApiRevokeAccessToEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeAccessToEmployee(requestParameters.identifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This API returns a list of requested employees with requested fields.  The data is filtered based on the requested fields and access level of the logged-in user.  Only viewable categories are returned.<br /> <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Search for employees
         * @param {PeopleApiSearchEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchEmployees(requestParameters: PeopleApiSearchEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employees>> {
            const readEmployeesRequestReference: ReadEmployeesRequestReference = {
                fields: requestParameters.fields,
                filters: requestParameters.filters,
                showInactive: requestParameters.showInactive,
                humanReadable: requestParameters.humanReadable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchEmployees(readEmployeesRequestReference, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set or update an employee\'s start date.
         * @param {PeopleApiSetStartDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStartDate(requestParameters: PeopleApiSetStartDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: StartDateUpdate = {
                startDate: requestParameters.startDate,
                reason: requestParameters.reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStartDate(requestParameters.employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This changes the employee’s status to Terminated according to specified termination date. <br />
         * @summary Terminate company employee.
         * @param {PeopleApiTerminateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateEmployee(requestParameters: PeopleApiTerminateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EmployeeTermination = {
                terminationDate: requestParameters.terminationDate,
                terminationReason: requestParameters.terminationReason,
                reasonType: requestParameters.reasonType,
                noticePeriod: requestParameters.noticePeriod,
                lastDayOfWork: requestParameters.lastDayOfWork
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateEmployee(requestParameters.identifier, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change an employee\'s email address. If you cannot change the self email an invitation will be sent to the new address to verify the email if the employee is invited/active.<br />
         * @summary Update an employee\'s email address.
         * @param {PeopleApiUpdateEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmail(requestParameters: PeopleApiUpdateEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: ChangeEmail = {
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmail(requestParameters.id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This updates the employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields) where historical is equal to false.  <br /><br><b>Note</b>
         * @summary Update company employee.
         * @param {PeopleApiUpdateEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeRecord(requestParameters: PeopleApiUpdateEmployeeRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: PeopleUpdateEmployeeRecordRequest = {
                firstName: requestParameters.firstName,
                personal: requestParameters.personal,
                about: requestParameters.about
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeRecord(requestParameters.identifier, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates an employment entry from a given employee\'s employment history.
         * @param {PeopleApiUpdateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmploymentEntry(requestParameters: PeopleApiUpdateEmploymentEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EmploymentEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmploymentEntry(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {PeopleApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquityGrantForEmployee(requestParameters: PeopleApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EquityEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquityGrantForEmployee(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates a work entry from employee\'s work history
         * @param {PeopleApiUpdateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkEntry(requestParameters: PeopleApiUpdateWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: WorkEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkEntry(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload an employee\'s Avatar by providing a URL to the image to upload.<br />
         * @summary Upload employee\'s avatar by image url
         * @param {PeopleApiUploadEmployeeAvatarUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadEmployeeAvatarUrl(requestParameters: PeopleApiUploadEmployeeAvatarUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: UploadAvatar = {
                url: requestParameters.url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadEmployeeAvatarUrl(requestParameters.employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeopleApi - factory interface
 * @export
 */
export const PeopleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleApiFp(configuration)
    return {
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This creates a new employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields).  <br /><br><b>Note</b>
         * @summary Create company employee.
         * @param {PeopleApiCreateEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeRecord(requestParameters: PeopleApiCreateEmployeeRecordRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.createEmployeeRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new employment entry for a given employee.
         * @param {PeopleApiCreateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmploymentEntry(requestParameters: PeopleApiCreateEmploymentEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEmploymentEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {PeopleApiCreateEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquityGrant(requestParameters: PeopleApiCreateEquityGrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEquityGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {PeopleApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSalaryEntry(requestParameters: PeopleApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewSalaryEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {PeopleApiCreateTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrainingRecord(requestParameters: PeopleApiCreateTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {PeopleApiCreateVariablePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariablePayment(requestParameters: PeopleApiCreateVariablePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createVariablePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new work entry for a given employee.
         * @param {PeopleApiCreateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkEntry(requestParameters: PeopleApiCreateWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an employment entry from a given employee\'s employment history.
         * @param {PeopleApiDeleteEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmploymentEntry(requestParameters: PeopleApiDeleteEmploymentEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmploymentEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {PeopleApiDeleteEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquityGrant(requestParameters: PeopleApiDeleteEquityGrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEquityGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {PeopleApiDeleteSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryEntry(requestParameters: PeopleApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalaryEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {PeopleApiDeleteTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord(requestParameters: PeopleApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {PeopleApiDeleteTrainingRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord_1(requestParameters: PeopleApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrainingRecord_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a work entry from a given employee\'s work history.
         * @param {PeopleApiDeleteWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkEntry(requestParameters: PeopleApiDeleteWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the avatar image URL of the employee.
         * @summary Read avatar for an employee ID.
         * @param {PeopleApiGetAvatarUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarUrl(requestParameters: PeopleApiGetAvatarUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAvatarUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the avatar image URL of the logged-in user.<b>Supported user types:</b> Employee.
         * @summary Read avatar for logged-in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarUrl_2(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAvatarUrl_2(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the avatar image URL of the employee.
         * @summary Read avatar for an employee email
         * @param {PeopleApiGetEmailAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailAvatar(requestParameters: PeopleApiGetEmailAvatarRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmailAvatar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s employment history.
         * @param {PeopleApiGetEmploymentHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentHistory(requestParameters: PeopleApiGetEmploymentHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentEntries> {
            return localVarFp.getEmploymentHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {PeopleApiGetSalaryHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryHistory(requestParameters: PeopleApiGetSalaryHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<SalaryEntries> {
            return localVarFp.getSalaryHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s work history
         * @param {PeopleApiGetWorkHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkHistory(requestParameters: PeopleApiGetWorkHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntries> {
            return localVarFp.getWorkHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invite an employee with a welcome wizard ID.
         * @param {PeopleApiInviteEmployeeWizardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteEmployeeWizard(requestParameters: PeopleApiInviteEmployeeWizardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.inviteEmployeeWizard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the public section of all  active employees of the logged-in user company.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value. Use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read the public profile section of all active employees.
         * @param {PeopleApiListActiveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listActiveEmployees(requestParameters: PeopleApiListActiveEmployeesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EmployeesProfiles> {
            return localVarFp.listActiveEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s life-cycle status history.
         * @param {PeopleApiListEmployeeLifecycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeLifecycle(requestParameters: PeopleApiListEmployeeLifecycleRequest, options?: AxiosRequestConfig): AxiosPromise<LifeCycleEntries> {
            return localVarFp.listEmployeeLifecycle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>/people/search</b> (\"Search for employees\") instead. <br/><br/> This returns a list of all active employees. The data is filtered based on the access level of the logged-in user. Only viewable categories are returned.<br /><br> <b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read all company employees
         * @param {PeopleApiListEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listEmployees(requestParameters: PeopleApiListEmployeesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Employees> {
            return localVarFp.listEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {PeopleApiListEquityGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquityGrants(requestParameters: PeopleApiListEquityGrantsRequest, options?: AxiosRequestConfig): AxiosPromise<EquityEntries> {
            return localVarFp.listEquityGrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {PeopleApiListTrainingRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrainingRecords(requestParameters: PeopleApiListTrainingRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingEntries> {
            return localVarFp.listTrainingRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {PeopleApiListVariablePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablePayments(requestParameters: PeopleApiListVariablePaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<VariableEntries> {
            return localVarFp.listVariablePayments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>POST /people/{identifier}</b> (\"Read company employee fields by ID.\") instead. <br/><br/> Returns the employee by the specified ID.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read company employee by ID.
         * @param {PeopleApiReadEmployeeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        readEmployeeById(requestParameters: PeopleApiReadEmployeeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Employees> {
            return localVarFp.readEmployeeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns the employee\'s fields by the specified ID or email.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Read company employee fields by employee ID.
         * @param {PeopleApiReadEmployeeFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmployeeFields(requestParameters: PeopleApiReadEmployeeFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<Employees> {
            return localVarFp.readEmployeeFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revoke access to Bob for an employee.
         * @param {PeopleApiRevokeAccessToEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccessToEmployee(requestParameters: PeopleApiRevokeAccessToEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.revokeAccessToEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This API returns a list of requested employees with requested fields.  The data is filtered based on the requested fields and access level of the logged-in user.  Only viewable categories are returned.<br /> <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Search for employees
         * @param {PeopleApiSearchEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmployees(requestParameters: PeopleApiSearchEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<Employees> {
            return localVarFp.searchEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set or update an employee\'s start date.
         * @param {PeopleApiSetStartDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStartDate(requestParameters: PeopleApiSetStartDateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setStartDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This changes the employee’s status to Terminated according to specified termination date. <br />
         * @summary Terminate company employee.
         * @param {PeopleApiTerminateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateEmployee(requestParameters: PeopleApiTerminateEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.terminateEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Change an employee\'s email address. If you cannot change the self email an invitation will be sent to the new address to verify the email if the employee is invited/active.<br />
         * @summary Update an employee\'s email address.
         * @param {PeopleApiUpdateEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail(requestParameters: PeopleApiUpdateEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This updates the employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields) where historical is equal to false.  <br /><br><b>Note</b>
         * @summary Update company employee.
         * @param {PeopleApiUpdateEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeRecord(requestParameters: PeopleApiUpdateEmployeeRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmployeeRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates an employment entry from a given employee\'s employment history.
         * @param {PeopleApiUpdateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentEntry(requestParameters: PeopleApiUpdateEmploymentEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmploymentEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {PeopleApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquityGrantForEmployee(requestParameters: PeopleApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEquityGrantForEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates a work entry from employee\'s work history
         * @param {PeopleApiUpdateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkEntry(requestParameters: PeopleApiUpdateWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload an employee\'s Avatar by providing a URL to the image to upload.<br />
         * @summary Upload employee\'s avatar by image url
         * @param {PeopleApiUploadEmployeeAvatarUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadEmployeeAvatarUrl(requestParameters: PeopleApiUploadEmployeeAvatarUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadEmployeeAvatarUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmployeeRecord operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateEmployeeRecordRequest
 */
export type PeopleApiCreateEmployeeRecordRequest = {
    
} & CreateEmployeeRequest

/**
 * Request parameters for createEmploymentEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateEmploymentEntryRequest
 */
export type PeopleApiCreateEmploymentEntryRequest = {
    /**
    * employee id
    * @type {string}
    * @memberof PeopleApiCreateEmploymentEntry
    */
    readonly id: string
    /**
    * Employment entry to add. This must not conflict with another entry on the same effective date.
    * @type {EmploymentEntry}
    * @memberof PeopleApiCreateEmploymentEntry
    */
    readonly requestBody: EmploymentEntry
}

/**
 * Request parameters for createEquityGrant operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateEquityGrantRequest
 */
export type PeopleApiCreateEquityGrantRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiCreateEquityGrant
    */
    readonly id: string
    /**
    * Equity grant to add.
    * @type {EquityEntry}
    * @memberof PeopleApiCreateEquityGrant
    */
    readonly requestBody: EquityEntry
}

/**
 * Request parameters for createNewSalaryEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateNewSalaryEntryRequest
 */
export type PeopleApiCreateNewSalaryEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiCreateNewSalaryEntry
    */
    readonly id: string
    /**
    * Salary entry to add. This must not conflict with another entry on the same effective date.
    * @type {SalaryEntry}
    * @memberof PeopleApiCreateNewSalaryEntry
    */
    readonly requestBody: SalaryEntry
}

/**
 * Request parameters for createTrainingRecord operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateTrainingRecordRequest
 */
export type PeopleApiCreateTrainingRecordRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiCreateTrainingRecord
    */
    readonly id: string
    /**
    * Training entry to add.
    * @type {TrainingEntry}
    * @memberof PeopleApiCreateTrainingRecord
    */
    readonly requestBody: TrainingEntry
}

/**
 * Request parameters for createVariablePayment operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateVariablePaymentRequest
 */
export type PeopleApiCreateVariablePaymentRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiCreateVariablePayment
    */
    readonly id: string
    /**
    * Variable payment to add.
    * @type {VariableEntry}
    * @memberof PeopleApiCreateVariablePayment
    */
    readonly requestBody: VariableEntry
}

/**
 * Request parameters for createWorkEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateWorkEntryRequest
 */
export type PeopleApiCreateWorkEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiCreateWorkEntry
    */
    readonly id: string
    /**
    * Work entry to add. This must not conflict with another entry on the same effective date.
    * @type {WorkEntry}
    * @memberof PeopleApiCreateWorkEntry
    */
    readonly requestBody: WorkEntry
}

/**
 * Request parameters for deleteEmploymentEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiDeleteEmploymentEntryRequest
 */
export type PeopleApiDeleteEmploymentEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiDeleteEmploymentEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete.
    * @type {number}
    * @memberof PeopleApiDeleteEmploymentEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteEquityGrant operation in PeopleApi.
 * @export
 * @interface PeopleApiDeleteEquityGrantRequest
 */
export type PeopleApiDeleteEquityGrantRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiDeleteEquityGrant
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof PeopleApiDeleteEquityGrant
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteSalaryEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiDeleteSalaryEntryRequest
 */
export type PeopleApiDeleteSalaryEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiDeleteSalaryEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete.
    * @type {number}
    * @memberof PeopleApiDeleteSalaryEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteTrainingRecord operation in PeopleApi.
 * @export
 * @interface PeopleApiDeleteTrainingRecordRequest
 */
export type PeopleApiDeleteTrainingRecordRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiDeleteTrainingRecord
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof PeopleApiDeleteTrainingRecord
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteTrainingRecord_1 operation in PeopleApi.
 * @export
 * @interface PeopleApiDeleteTrainingRecord0Request
 */
export type PeopleApiDeleteTrainingRecord0Request = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiDeleteTrainingRecord0
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof PeopleApiDeleteTrainingRecord0
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteWorkEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiDeleteWorkEntryRequest
 */
export type PeopleApiDeleteWorkEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiDeleteWorkEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete
    * @type {number}
    * @memberof PeopleApiDeleteWorkEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for getAvatarUrl operation in PeopleApi.
 * @export
 * @interface PeopleApiGetAvatarUrlRequest
 */
export type PeopleApiGetAvatarUrlRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof PeopleApiGetAvatarUrl
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getEmailAvatar operation in PeopleApi.
 * @export
 * @interface PeopleApiGetEmailAvatarRequest
 */
export type PeopleApiGetEmailAvatarRequest = {
    
    /**
    * Employee email.
    * @type {string}
    * @memberof PeopleApiGetEmailAvatar
    */
    readonly email?: string
    
}

/**
 * Request parameters for getEmploymentHistory operation in PeopleApi.
 * @export
 * @interface PeopleApiGetEmploymentHistoryRequest
 */
export type PeopleApiGetEmploymentHistoryRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof PeopleApiGetEmploymentHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for getSalaryHistory operation in PeopleApi.
 * @export
 * @interface PeopleApiGetSalaryHistoryRequest
 */
export type PeopleApiGetSalaryHistoryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiGetSalaryHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for getWorkHistory operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkHistoryRequest
 */
export type PeopleApiGetWorkHistoryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiGetWorkHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for inviteEmployeeWizard operation in PeopleApi.
 * @export
 * @interface PeopleApiInviteEmployeeWizardRequest
 */
export type PeopleApiInviteEmployeeWizardRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiInviteEmployeeWizard
    */
    readonly employeeId: string
    
} & InvitationByWizard

/**
 * Request parameters for listActiveEmployees operation in PeopleApi.
 * @export
 * @interface PeopleApiListActiveEmployeesRequest
 */
export type PeopleApiListActiveEmployeesRequest = {
    
    /**
    * Optional field name to sort by. This defaults to firstName.
    * @type {string}
    * @memberof PeopleApiListActiveEmployees
    */
    readonly sortBy?: string
    
}

/**
 * Request parameters for listEmployeeLifecycle operation in PeopleApi.
 * @export
 * @interface PeopleApiListEmployeeLifecycleRequest
 */
export type PeopleApiListEmployeeLifecycleRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiListEmployeeLifecycle
    */
    readonly id: string
    
}

/**
 * Request parameters for listEmployees operation in PeopleApi.
 * @export
 * @interface PeopleApiListEmployeesRequest
 */
export type PeopleApiListEmployeesRequest = {
    
    /**
    * Should include inactive employees.
    * @type {boolean}
    * @memberof PeopleApiListEmployees
    */
    readonly showInactive?: boolean
    
    /**
    * Whether to supply humanReadable values in JSON instead of machine-readable format (default).
    * @type {boolean}
    * @memberof PeopleApiListEmployees
    */
    readonly humanReadable?: boolean
    
    /**
    * Whether to include the additional \"humanReadable\" JSON node in the response.
    * @type {boolean}
    * @memberof PeopleApiListEmployees
    */
    readonly includeHumanReadable?: boolean
    
}

/**
 * Request parameters for listEquityGrants operation in PeopleApi.
 * @export
 * @interface PeopleApiListEquityGrantsRequest
 */
export type PeopleApiListEquityGrantsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiListEquityGrants
    */
    readonly id: string
    
}

/**
 * Request parameters for listTrainingRecords operation in PeopleApi.
 * @export
 * @interface PeopleApiListTrainingRecordsRequest
 */
export type PeopleApiListTrainingRecordsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiListTrainingRecords
    */
    readonly id: string
    
}

/**
 * Request parameters for listVariablePayments operation in PeopleApi.
 * @export
 * @interface PeopleApiListVariablePaymentsRequest
 */
export type PeopleApiListVariablePaymentsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiListVariablePayments
    */
    readonly id: string
    
}

/**
 * Request parameters for readEmployeeById operation in PeopleApi.
 * @export
 * @interface PeopleApiReadEmployeeByIdRequest
 */
export type PeopleApiReadEmployeeByIdRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof PeopleApiReadEmployeeById
    */
    readonly identifier: string
    
    /**
    * Whether to supply fields (paths) instead of empty list as a default in order  to not exceed data permitted.
    * @type {Array<string>}
    * @memberof PeopleApiReadEmployeeById
    */
    readonly fields: Array<string>
    
    /**
    * Whether to supply humanReadable values in JSON instead of machine-readable (default) format.
    * @type {boolean}
    * @memberof PeopleApiReadEmployeeById
    */
    readonly humanReadable?: boolean
    
    /**
    * Whether to include the additional \"humanReadable\" JSON node in the response.
    * @type {boolean}
    * @memberof PeopleApiReadEmployeeById
    */
    readonly includeHumanReadable?: boolean
    
}

/**
 * Request parameters for readEmployeeFields operation in PeopleApi.
 * @export
 * @interface PeopleApiReadEmployeeFieldsRequest
 */
export type PeopleApiReadEmployeeFieldsRequest = {
    
    /**
    * employee ID or email
    * @type {string}
    * @memberof PeopleApiReadEmployeeFields
    */
    readonly identifier: string
    
} & ReadSingleEmployeeRequestReference

/**
 * Request parameters for revokeAccessToEmployee operation in PeopleApi.
 * @export
 * @interface PeopleApiRevokeAccessToEmployeeRequest
 */
export type PeopleApiRevokeAccessToEmployeeRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof PeopleApiRevokeAccessToEmployee
    */
    readonly identifier: string
    
}

/**
 * Request parameters for searchEmployees operation in PeopleApi.
 * @export
 * @interface PeopleApiSearchEmployeesRequest
 */
export type PeopleApiSearchEmployeesRequest = {
    
} & ReadEmployeesRequestReference

/**
 * Request parameters for setStartDate operation in PeopleApi.
 * @export
 * @interface PeopleApiSetStartDateRequest
 */
export type PeopleApiSetStartDateRequest = {
    
    /**
    * employee ID
    * @type {string}
    * @memberof PeopleApiSetStartDate
    */
    readonly employeeId: string
    
} & StartDateUpdate

/**
 * Request parameters for terminateEmployee operation in PeopleApi.
 * @export
 * @interface PeopleApiTerminateEmployeeRequest
 */
export type PeopleApiTerminateEmployeeRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiTerminateEmployee
    */
    readonly identifier: string
    
} & EmployeeTermination

/**
 * Request parameters for updateEmail operation in PeopleApi.
 * @export
 * @interface PeopleApiUpdateEmailRequest
 */
export type PeopleApiUpdateEmailRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof PeopleApiUpdateEmail
    */
    readonly id: string
    
} & ChangeEmail

/**
 * Request parameters for updateEmployeeRecord operation in PeopleApi.
 * @export
 * @interface PeopleApiUpdateEmployeeRecordRequest
 */
export type PeopleApiUpdateEmployeeRecordRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiUpdateEmployeeRecord
    */
    readonly identifier: string
    
} & PeopleUpdateEmployeeRecordRequest

/**
 * Request parameters for updateEmploymentEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiUpdateEmploymentEntryRequest
 */
export type PeopleApiUpdateEmploymentEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiUpdateEmploymentEntry
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof PeopleApiUpdateEmploymentEntry
    */
    readonly entryId: number
    /**
    * 
    * @type {EmploymentEntry}
    * @memberof PeopleApiUpdateEmploymentEntry
    */
    readonly requestBody: EmploymentEntry
}

/**
 * Request parameters for updateEquityGrantForEmployee operation in PeopleApi.
 * @export
 * @interface PeopleApiUpdateEquityGrantForEmployeeRequest
 */
export type PeopleApiUpdateEquityGrantForEmployeeRequest = {
    /**
    * Employee ID
    * @type {string}
    * @memberof PeopleApiUpdateEquityGrantForEmployee
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof PeopleApiUpdateEquityGrantForEmployee
    */
    readonly entryId: number
    /**
    * 
    * @type {EquityEntry}
    * @memberof PeopleApiUpdateEquityGrantForEmployee
    */
    readonly requestBody: EquityEntry
}

/**
 * Request parameters for updateWorkEntry operation in PeopleApi.
 * @export
 * @interface PeopleApiUpdateWorkEntryRequest
 */
export type PeopleApiUpdateWorkEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiUpdateWorkEntry
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof PeopleApiUpdateWorkEntry
    */
    readonly entryId: number
    /**
    * 
    * @type {WorkEntry}
    * @memberof PeopleApiUpdateWorkEntry
    */
    readonly requestBody: WorkEntry
}

/**
 * Request parameters for uploadEmployeeAvatarUrl operation in PeopleApi.
 * @export
 * @interface PeopleApiUploadEmployeeAvatarUrlRequest
 */
export type PeopleApiUploadEmployeeAvatarUrlRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PeopleApiUploadEmployeeAvatarUrl
    */
    readonly employeeId: string
    
} & UploadAvatar

/**
 * PeopleApiGenerated - object-oriented interface
 * @export
 * @class PeopleApiGenerated
 * @extends {BaseAPI}
 */
export class PeopleApiGenerated extends BaseAPI {
    /**
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This creates a new employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields).  <br /><br><b>Note</b>
     * @summary Create company employee.
     * @param {PeopleApiCreateEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createEmployeeRecord(requestParameters: PeopleApiCreateEmployeeRecordRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createEmployeeRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new employment entry for a given employee.
     * @param {PeopleApiCreateEmploymentEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createEmploymentEntry(requestParameters: PeopleApiCreateEmploymentEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createEmploymentEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new equity grant for a given employee.
     * @param {PeopleApiCreateEquityGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createEquityGrant(requestParameters: PeopleApiCreateEquityGrantRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createEquityGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new salary entry for a given employee.
     * @param {PeopleApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createNewSalaryEntry(requestParameters: PeopleApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createNewSalaryEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new training records for a given employee
     * @param {PeopleApiCreateTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createTrainingRecord(requestParameters: PeopleApiCreateTrainingRecordRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new variable payment for a given employee.
     * @param {PeopleApiCreateVariablePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createVariablePayment(requestParameters: PeopleApiCreateVariablePaymentRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createVariablePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new work entry for a given employee.
     * @param {PeopleApiCreateWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createWorkEntry(requestParameters: PeopleApiCreateWorkEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an employment entry from a given employee\'s employment history.
     * @param {PeopleApiDeleteEmploymentEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public deleteEmploymentEntry(requestParameters: PeopleApiDeleteEmploymentEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).deleteEmploymentEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an equity grant for an employee.
     * @param {PeopleApiDeleteEquityGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public deleteEquityGrant(requestParameters: PeopleApiDeleteEquityGrantRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).deleteEquityGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a salary entry from the employee\'s list.
     * @param {PeopleApiDeleteSalaryEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public deleteSalaryEntry(requestParameters: PeopleApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).deleteSalaryEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a training record for an employee.
     * @param {PeopleApiDeleteTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public deleteTrainingRecord(requestParameters: PeopleApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).deleteTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes any training records for an employee.
     * @param {PeopleApiDeleteTrainingRecord0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public deleteTrainingRecord_1(requestParameters: PeopleApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).deleteTrainingRecord_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a work entry from a given employee\'s work history.
     * @param {PeopleApiDeleteWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public deleteWorkEntry(requestParameters: PeopleApiDeleteWorkEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).deleteWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the avatar image URL of the employee.
     * @summary Read avatar for an employee ID.
     * @param {PeopleApiGetAvatarUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getAvatarUrl(requestParameters: PeopleApiGetAvatarUrlRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getAvatarUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the avatar image URL of the logged-in user.<b>Supported user types:</b> Employee.
     * @summary Read avatar for logged-in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getAvatarUrl_2(options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getAvatarUrl_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the avatar image URL of the employee.
     * @summary Read avatar for an employee email
     * @param {PeopleApiGetEmailAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getEmailAvatar(requestParameters: PeopleApiGetEmailAvatarRequest = {}, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getEmailAvatar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s employment history.
     * @param {PeopleApiGetEmploymentHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getEmploymentHistory(requestParameters: PeopleApiGetEmploymentHistoryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getEmploymentHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s salary history.
     * @param {PeopleApiGetSalaryHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getSalaryHistory(requestParameters: PeopleApiGetSalaryHistoryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getSalaryHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s work history
     * @param {PeopleApiGetWorkHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkHistory(requestParameters: PeopleApiGetWorkHistoryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invite an employee with a welcome wizard ID.
     * @param {PeopleApiInviteEmployeeWizardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public inviteEmployeeWizard(requestParameters: PeopleApiInviteEmployeeWizardRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).inviteEmployeeWizard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the public section of all  active employees of the logged-in user company.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value. Use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Read the public profile section of all active employees.
     * @param {PeopleApiListActiveEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listActiveEmployees(requestParameters: PeopleApiListActiveEmployeesRequest = {}, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listActiveEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s life-cycle status history.
     * @param {PeopleApiListEmployeeLifecycleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listEmployeeLifecycle(requestParameters: PeopleApiListEmployeeLifecycleRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listEmployeeLifecycle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>/people/search</b> (\"Search for employees\") instead. <br/><br/> This returns a list of all active employees. The data is filtered based on the access level of the logged-in user. Only viewable categories are returned.<br /><br> <b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Read all company employees
     * @param {PeopleApiListEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listEmployees(requestParameters: PeopleApiListEmployeesRequest = {}, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List the employee\'s equity grants.
     * @param {PeopleApiListEquityGrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listEquityGrants(requestParameters: PeopleApiListEquityGrantsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listEquityGrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List the employee\'s training records.
     * @param {PeopleApiListTrainingRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listTrainingRecords(requestParameters: PeopleApiListTrainingRecordsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listTrainingRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s variable payments
     * @param {PeopleApiListVariablePaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listVariablePayments(requestParameters: PeopleApiListVariablePaymentsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listVariablePayments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Deprecated at the end of March 2024. Please use <b>POST /people/{identifier}</b> (\"Read company employee fields by ID.\") instead. <br/><br/> Returns the employee by the specified ID.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Read company employee by ID.
     * @param {PeopleApiReadEmployeeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public readEmployeeById(requestParameters: PeopleApiReadEmployeeByIdRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).readEmployeeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns the employee\'s fields by the specified ID or email.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Read company employee fields by employee ID.
     * @param {PeopleApiReadEmployeeFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public readEmployeeFields(requestParameters: PeopleApiReadEmployeeFieldsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).readEmployeeFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revoke access to Bob for an employee.
     * @param {PeopleApiRevokeAccessToEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public revokeAccessToEmployee(requestParameters: PeopleApiRevokeAccessToEmployeeRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).revokeAccessToEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This API returns a list of requested employees with requested fields.  The data is filtered based on the requested fields and access level of the logged-in user.  Only viewable categories are returned.<br /> <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Search for employees
     * @param {PeopleApiSearchEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public searchEmployees(requestParameters: PeopleApiSearchEmployeesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).searchEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set or update an employee\'s start date.
     * @param {PeopleApiSetStartDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public setStartDate(requestParameters: PeopleApiSetStartDateRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).setStartDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This changes the employee’s status to Terminated according to specified termination date. <br />
     * @summary Terminate company employee.
     * @param {PeopleApiTerminateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public terminateEmployee(requestParameters: PeopleApiTerminateEmployeeRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).terminateEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change an employee\'s email address. If you cannot change the self email an invitation will be sent to the new address to verify the email if the employee is invited/active.<br />
     * @summary Update an employee\'s email address.
     * @param {PeopleApiUpdateEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public updateEmail(requestParameters: PeopleApiUpdateEmailRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).updateEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>This updates the employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields) where historical is equal to false.  <br /><br><b>Note</b>
     * @summary Update company employee.
     * @param {PeopleApiUpdateEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public updateEmployeeRecord(requestParameters: PeopleApiUpdateEmployeeRecordRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).updateEmployeeRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Updates an employment entry from a given employee\'s employment history.
     * @param {PeopleApiUpdateEmploymentEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public updateEmploymentEntry(requestParameters: PeopleApiUpdateEmploymentEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).updateEmploymentEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
     * @summary Updates an equity grant for an employee
     * @param {PeopleApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public updateEquityGrantForEmployee(requestParameters: PeopleApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).updateEquityGrantForEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Updates a work entry from employee\'s work history
     * @param {PeopleApiUpdateWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public updateWorkEntry(requestParameters: PeopleApiUpdateWorkEntryRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).updateWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload an employee\'s Avatar by providing a URL to the image to upload.<br />
     * @summary Upload employee\'s avatar by image url
     * @param {PeopleApiUploadEmployeeAvatarUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public uploadEmployeeAvatarUrl(requestParameters: PeopleApiUploadEmployeeAvatarUrlRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).uploadEmployeeAvatarUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
