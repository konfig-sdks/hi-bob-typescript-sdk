/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FilterInstruction } from '../models';
// @ts-ignore
import { GetPositionsRequest } from '../models';
// @ts-ignore
import { PositionEntriesInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ObjectsApi - axios parameter creator
 * @export
 */
export const ObjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of the company positions, filtered by the specified attributes.  <br /><br><b>Note</b>
         * @summary Read company positions
         * @param {GetPositionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCompanyPositions: async (body: GetPositionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('searchCompanyPositions', 'body', body)
            const localVarPath = `/objects/position/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/objects/position/search',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectsApi - functional programming interface
 * @export
 */
export const ObjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of the company positions, filtered by the specified attributes.  <br /><br><b>Note</b>
         * @summary Read company positions
         * @param {ObjectsApiSearchCompanyPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCompanyPositions(requestParameters: ObjectsApiSearchCompanyPositionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionEntriesInner>>> {
            const body: GetPositionsRequest = {
                fields: requestParameters.fields,
                filters: requestParameters.filters,
                includeHumanReadable: requestParameters.includeHumanReadable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCompanyPositions(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectsApi - factory interface
 * @export
 */
export const ObjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectsApiFp(configuration)
    return {
        /**
         * Returns a list of the company positions, filtered by the specified attributes.  <br /><br><b>Note</b>
         * @summary Read company positions
         * @param {ObjectsApiSearchCompanyPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCompanyPositions(requestParameters: ObjectsApiSearchCompanyPositionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PositionEntriesInner>> {
            return localVarFp.searchCompanyPositions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchCompanyPositions operation in ObjectsApi.
 * @export
 * @interface ObjectsApiSearchCompanyPositionsRequest
 */
export type ObjectsApiSearchCompanyPositionsRequest = {
    
} & GetPositionsRequest

/**
 * ObjectsApiGenerated - object-oriented interface
 * @export
 * @class ObjectsApiGenerated
 * @extends {BaseAPI}
 */
export class ObjectsApiGenerated extends BaseAPI {
    /**
     * Returns a list of the company positions, filtered by the specified attributes.  <br /><br><b>Note</b>
     * @summary Read company positions
     * @param {ObjectsApiSearchCompanyPositionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApiGenerated
     */
    public searchCompanyPositions(requestParameters: ObjectsApiSearchCompanyPositionsRequest, options?: AxiosRequestConfig) {
        return ObjectsApiFp(this.configuration).searchCompanyPositions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
