/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CurrencyValue } from '../models';
// @ts-ignore
import { EmploymentEntries } from '../models';
// @ts-ignore
import { EmploymentEntry } from '../models';
// @ts-ignore
import { EquityEntries } from '../models';
// @ts-ignore
import { EquityEntry } from '../models';
// @ts-ignore
import { LifeCycleEntries } from '../models';
// @ts-ignore
import { SalaryEntries } from '../models';
// @ts-ignore
import { SalaryEntry } from '../models';
// @ts-ignore
import { TrainingEntries } from '../models';
// @ts-ignore
import { TrainingEntry } from '../models';
// @ts-ignore
import { VariableEntries } from '../models';
// @ts-ignore
import { VariableEntry } from '../models';
// @ts-ignore
import { WorkEntries } from '../models';
// @ts-ignore
import { WorkEntry } from '../models';
// @ts-ignore
import { WorkEntryAllOfReportsTo } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TablesApi - axios parameter creator
 * @export
 */
export const TablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new employment entry for a given employee.
         * @param {string} id employee id
         * @param {EmploymentEntry} entry Employment entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmploymentEntry: async (id: string, entry: EmploymentEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEmploymentEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createEmploymentEntry', 'entry', entry)
            const localVarPath = `/people/{id}/employment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {string} id Employee ID.
         * @param {EquityEntry} entry Equity grant to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquityGrant: async (id: string, entry: EquityEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEquityGrant', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createEquityGrant', 'entry', entry)
            const localVarPath = `/people/{id}/equities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {string} id Employee ID.
         * @param {SalaryEntry} entry Salary entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSalaryEntry: async (id: string, entry: SalaryEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createNewSalaryEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createNewSalaryEntry', 'entry', entry)
            const localVarPath = `/people/{id}/salaries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {string} id Employee ID.
         * @param {TrainingEntry} entry Training entry to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrainingRecord: async (id: string, entry: TrainingEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTrainingRecord', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createTrainingRecord', 'entry', entry)
            const localVarPath = `/people/{id}/training`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {string} id Employee ID.
         * @param {VariableEntry} entry Variable payment to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariablePayment: async (id: string, entry: VariableEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createVariablePayment', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createVariablePayment', 'entry', entry)
            const localVarPath = `/people/{id}/variable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new work entry for a given employee.
         * @param {string} id Employee ID.
         * @param {WorkEntry} entry Work entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkEntry: async (id: string, entry: WorkEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createWorkEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createWorkEntry', 'entry', entry)
            const localVarPath = `/people/{id}/work`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an employment entry from a given employee\'s employment history.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmploymentEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmploymentEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEmploymentEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/employment/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquityGrant: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEquityGrant', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEquityGrant', 'entryId', entryId)
            const localVarPath = `/people/{id}/equities/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSalaryEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteSalaryEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/salaries/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainingRecord', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteTrainingRecord', 'entryId', entryId)
            const localVarPath = `/people/{id}/variable/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord_1: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainingRecord_1', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteTrainingRecord_1', 'entryId', entryId)
            const localVarPath = `/people/{id}/training/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a work entry from a given employee\'s work history.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWorkEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteWorkEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/work/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s employment history.
         * @param {string} id employee id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmploymentHistory', 'id', id)
            const localVarPath = `/people/{id}/employment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSalaryHistory', 'id', id)
            const localVarPath = `/people/{id}/salaries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s work history
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWorkHistory', 'id', id)
            const localVarPath = `/people/{id}/work`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s life-cycle status history.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeLifecycle: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEmployeeLifecycle', 'id', id)
            const localVarPath = `/people/{id}/lifecycle`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/lifecycle',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquityGrants: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEquityGrants', 'id', id)
            const localVarPath = `/people/{id}/equities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrainingRecords: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTrainingRecords', 'id', id)
            const localVarPath = `/people/{id}/training`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablePayments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVariablePayments', 'id', id)
            const localVarPath = `/people/{id}/variable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates an employment entry from a given employee\'s employment history.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to update.
         * @param {EmploymentEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentEntry: async (id: string, entryId: number, body: EmploymentEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmploymentEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEmploymentEntry', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEmploymentEntry', 'body', body)
            const localVarPath = `/people/{id}/employment/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/employment/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {string} id Employee ID
         * @param {number} entryId The entry ID to update.
         * @param {EquityEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquityGrantForEmployee: async (id: string, entryId: number, body: EquityEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'body', body)
            const localVarPath = `/people/{id}/equities/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates a work entry from employee\'s work history
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to update.
         * @param {WorkEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkEntry: async (id: string, entryId: number, body: WorkEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWorkEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateWorkEntry', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateWorkEntry', 'body', body)
            const localVarPath = `/people/{id}/work/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/work/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TablesApi - functional programming interface
 * @export
 */
export const TablesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TablesApiAxiosParamCreator(configuration)
    return {
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new employment entry for a given employee.
         * @param {TablesApiCreateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmploymentEntry(requestParameters: TablesApiCreateEmploymentEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: EmploymentEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmploymentEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {TablesApiCreateEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquityGrant(requestParameters: TablesApiCreateEquityGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: EquityEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquityGrant(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {TablesApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSalaryEntry(requestParameters: TablesApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: SalaryEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSalaryEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {TablesApiCreateTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrainingRecord(requestParameters: TablesApiCreateTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: TrainingEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrainingRecord(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {TablesApiCreateVariablePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariablePayment(requestParameters: TablesApiCreateVariablePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: VariableEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVariablePayment(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new work entry for a given employee.
         * @param {TablesApiCreateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkEntry(requestParameters: TablesApiCreateWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: WorkEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an employment entry from a given employee\'s employment history.
         * @param {TablesApiDeleteEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmploymentEntry(requestParameters: TablesApiDeleteEmploymentEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmploymentEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {TablesApiDeleteEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquityGrant(requestParameters: TablesApiDeleteEquityGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquityGrant(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {TablesApiDeleteSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalaryEntry(requestParameters: TablesApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalaryEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {TablesApiDeleteTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainingRecord(requestParameters: TablesApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainingRecord(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {TablesApiDeleteTrainingRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainingRecord_1(requestParameters: TablesApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainingRecord_1(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a work entry from a given employee\'s work history.
         * @param {TablesApiDeleteWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkEntry(requestParameters: TablesApiDeleteWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s employment history.
         * @param {TablesApiGetEmploymentHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmploymentHistory(requestParameters: TablesApiGetEmploymentHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmploymentHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {TablesApiGetSalaryHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalaryHistory(requestParameters: TablesApiGetSalaryHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalaryHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s work history
         * @param {TablesApiGetWorkHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkHistory(requestParameters: TablesApiGetWorkHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s life-cycle status history.
         * @param {TablesApiListEmployeeLifecycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeLifecycle(requestParameters: TablesApiListEmployeeLifecycleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifeCycleEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeLifecycle(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {TablesApiListEquityGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEquityGrants(requestParameters: TablesApiListEquityGrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquityEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEquityGrants(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {TablesApiListTrainingRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrainingRecords(requestParameters: TablesApiListTrainingRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrainingRecords(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {TablesApiListVariablePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablePayments(requestParameters: TablesApiListVariablePaymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablePayments(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates an employment entry from a given employee\'s employment history.
         * @param {TablesApiUpdateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmploymentEntry(requestParameters: TablesApiUpdateEmploymentEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EmploymentEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmploymentEntry(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {TablesApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquityGrantForEmployee(requestParameters: TablesApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EquityEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquityGrantForEmployee(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates a work entry from employee\'s work history
         * @param {TablesApiUpdateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkEntry(requestParameters: TablesApiUpdateWorkEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: WorkEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkEntry(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TablesApi - factory interface
 * @export
 */
export const TablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TablesApiFp(configuration)
    return {
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new employment entry for a given employee.
         * @param {TablesApiCreateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmploymentEntry(requestParameters: TablesApiCreateEmploymentEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEmploymentEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {TablesApiCreateEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquityGrant(requestParameters: TablesApiCreateEquityGrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEquityGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {TablesApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSalaryEntry(requestParameters: TablesApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewSalaryEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {TablesApiCreateTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrainingRecord(requestParameters: TablesApiCreateTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {TablesApiCreateVariablePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariablePayment(requestParameters: TablesApiCreateVariablePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createVariablePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new work entry for a given employee.
         * @param {TablesApiCreateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkEntry(requestParameters: TablesApiCreateWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an employment entry from a given employee\'s employment history.
         * @param {TablesApiDeleteEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmploymentEntry(requestParameters: TablesApiDeleteEmploymentEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmploymentEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {TablesApiDeleteEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquityGrant(requestParameters: TablesApiDeleteEquityGrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEquityGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {TablesApiDeleteSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryEntry(requestParameters: TablesApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalaryEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {TablesApiDeleteTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord(requestParameters: TablesApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {TablesApiDeleteTrainingRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord_1(requestParameters: TablesApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrainingRecord_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a work entry from a given employee\'s work history.
         * @param {TablesApiDeleteWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkEntry(requestParameters: TablesApiDeleteWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s employment history.
         * @param {TablesApiGetEmploymentHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentHistory(requestParameters: TablesApiGetEmploymentHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<EmploymentEntries> {
            return localVarFp.getEmploymentHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {TablesApiGetSalaryHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryHistory(requestParameters: TablesApiGetSalaryHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<SalaryEntries> {
            return localVarFp.getSalaryHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s work history
         * @param {TablesApiGetWorkHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkHistory(requestParameters: TablesApiGetWorkHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<WorkEntries> {
            return localVarFp.getWorkHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s life-cycle status history.
         * @param {TablesApiListEmployeeLifecycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeLifecycle(requestParameters: TablesApiListEmployeeLifecycleRequest, options?: AxiosRequestConfig): AxiosPromise<LifeCycleEntries> {
            return localVarFp.listEmployeeLifecycle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {TablesApiListEquityGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquityGrants(requestParameters: TablesApiListEquityGrantsRequest, options?: AxiosRequestConfig): AxiosPromise<EquityEntries> {
            return localVarFp.listEquityGrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {TablesApiListTrainingRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrainingRecords(requestParameters: TablesApiListTrainingRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingEntries> {
            return localVarFp.listTrainingRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {TablesApiListVariablePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablePayments(requestParameters: TablesApiListVariablePaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<VariableEntries> {
            return localVarFp.listVariablePayments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates an employment entry from a given employee\'s employment history.
         * @param {TablesApiUpdateEmploymentEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmploymentEntry(requestParameters: TablesApiUpdateEmploymentEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmploymentEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {TablesApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquityGrantForEmployee(requestParameters: TablesApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEquityGrantForEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Updates a work entry from employee\'s work history
         * @param {TablesApiUpdateWorkEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkEntry(requestParameters: TablesApiUpdateWorkEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateWorkEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmploymentEntry operation in TablesApi.
 * @export
 * @interface TablesApiCreateEmploymentEntryRequest
 */
export type TablesApiCreateEmploymentEntryRequest = {
    /**
    * employee id
    * @type {string}
    * @memberof TablesApiCreateEmploymentEntry
    */
    readonly id: string
    /**
    * Employment entry to add. This must not conflict with another entry on the same effective date.
    * @type {EmploymentEntry}
    * @memberof TablesApiCreateEmploymentEntry
    */
    readonly requestBody: EmploymentEntry
}

/**
 * Request parameters for createEquityGrant operation in TablesApi.
 * @export
 * @interface TablesApiCreateEquityGrantRequest
 */
export type TablesApiCreateEquityGrantRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiCreateEquityGrant
    */
    readonly id: string
    /**
    * Equity grant to add.
    * @type {EquityEntry}
    * @memberof TablesApiCreateEquityGrant
    */
    readonly requestBody: EquityEntry
}

/**
 * Request parameters for createNewSalaryEntry operation in TablesApi.
 * @export
 * @interface TablesApiCreateNewSalaryEntryRequest
 */
export type TablesApiCreateNewSalaryEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiCreateNewSalaryEntry
    */
    readonly id: string
    /**
    * Salary entry to add. This must not conflict with another entry on the same effective date.
    * @type {SalaryEntry}
    * @memberof TablesApiCreateNewSalaryEntry
    */
    readonly requestBody: SalaryEntry
}

/**
 * Request parameters for createTrainingRecord operation in TablesApi.
 * @export
 * @interface TablesApiCreateTrainingRecordRequest
 */
export type TablesApiCreateTrainingRecordRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiCreateTrainingRecord
    */
    readonly id: string
    /**
    * Training entry to add.
    * @type {TrainingEntry}
    * @memberof TablesApiCreateTrainingRecord
    */
    readonly requestBody: TrainingEntry
}

/**
 * Request parameters for createVariablePayment operation in TablesApi.
 * @export
 * @interface TablesApiCreateVariablePaymentRequest
 */
export type TablesApiCreateVariablePaymentRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiCreateVariablePayment
    */
    readonly id: string
    /**
    * Variable payment to add.
    * @type {VariableEntry}
    * @memberof TablesApiCreateVariablePayment
    */
    readonly requestBody: VariableEntry
}

/**
 * Request parameters for createWorkEntry operation in TablesApi.
 * @export
 * @interface TablesApiCreateWorkEntryRequest
 */
export type TablesApiCreateWorkEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiCreateWorkEntry
    */
    readonly id: string
    /**
    * Work entry to add. This must not conflict with another entry on the same effective date.
    * @type {WorkEntry}
    * @memberof TablesApiCreateWorkEntry
    */
    readonly requestBody: WorkEntry
}

/**
 * Request parameters for deleteEmploymentEntry operation in TablesApi.
 * @export
 * @interface TablesApiDeleteEmploymentEntryRequest
 */
export type TablesApiDeleteEmploymentEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiDeleteEmploymentEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete.
    * @type {number}
    * @memberof TablesApiDeleteEmploymentEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteEquityGrant operation in TablesApi.
 * @export
 * @interface TablesApiDeleteEquityGrantRequest
 */
export type TablesApiDeleteEquityGrantRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiDeleteEquityGrant
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof TablesApiDeleteEquityGrant
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteSalaryEntry operation in TablesApi.
 * @export
 * @interface TablesApiDeleteSalaryEntryRequest
 */
export type TablesApiDeleteSalaryEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiDeleteSalaryEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete.
    * @type {number}
    * @memberof TablesApiDeleteSalaryEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteTrainingRecord operation in TablesApi.
 * @export
 * @interface TablesApiDeleteTrainingRecordRequest
 */
export type TablesApiDeleteTrainingRecordRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiDeleteTrainingRecord
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof TablesApiDeleteTrainingRecord
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteTrainingRecord_1 operation in TablesApi.
 * @export
 * @interface TablesApiDeleteTrainingRecord0Request
 */
export type TablesApiDeleteTrainingRecord0Request = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiDeleteTrainingRecord0
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof TablesApiDeleteTrainingRecord0
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteWorkEntry operation in TablesApi.
 * @export
 * @interface TablesApiDeleteWorkEntryRequest
 */
export type TablesApiDeleteWorkEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiDeleteWorkEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete
    * @type {number}
    * @memberof TablesApiDeleteWorkEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for getEmploymentHistory operation in TablesApi.
 * @export
 * @interface TablesApiGetEmploymentHistoryRequest
 */
export type TablesApiGetEmploymentHistoryRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof TablesApiGetEmploymentHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for getSalaryHistory operation in TablesApi.
 * @export
 * @interface TablesApiGetSalaryHistoryRequest
 */
export type TablesApiGetSalaryHistoryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiGetSalaryHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for getWorkHistory operation in TablesApi.
 * @export
 * @interface TablesApiGetWorkHistoryRequest
 */
export type TablesApiGetWorkHistoryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiGetWorkHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for listEmployeeLifecycle operation in TablesApi.
 * @export
 * @interface TablesApiListEmployeeLifecycleRequest
 */
export type TablesApiListEmployeeLifecycleRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiListEmployeeLifecycle
    */
    readonly id: string
    
}

/**
 * Request parameters for listEquityGrants operation in TablesApi.
 * @export
 * @interface TablesApiListEquityGrantsRequest
 */
export type TablesApiListEquityGrantsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiListEquityGrants
    */
    readonly id: string
    
}

/**
 * Request parameters for listTrainingRecords operation in TablesApi.
 * @export
 * @interface TablesApiListTrainingRecordsRequest
 */
export type TablesApiListTrainingRecordsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiListTrainingRecords
    */
    readonly id: string
    
}

/**
 * Request parameters for listVariablePayments operation in TablesApi.
 * @export
 * @interface TablesApiListVariablePaymentsRequest
 */
export type TablesApiListVariablePaymentsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiListVariablePayments
    */
    readonly id: string
    
}

/**
 * Request parameters for updateEmploymentEntry operation in TablesApi.
 * @export
 * @interface TablesApiUpdateEmploymentEntryRequest
 */
export type TablesApiUpdateEmploymentEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiUpdateEmploymentEntry
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof TablesApiUpdateEmploymentEntry
    */
    readonly entryId: number
    /**
    * 
    * @type {EmploymentEntry}
    * @memberof TablesApiUpdateEmploymentEntry
    */
    readonly requestBody: EmploymentEntry
}

/**
 * Request parameters for updateEquityGrantForEmployee operation in TablesApi.
 * @export
 * @interface TablesApiUpdateEquityGrantForEmployeeRequest
 */
export type TablesApiUpdateEquityGrantForEmployeeRequest = {
    /**
    * Employee ID
    * @type {string}
    * @memberof TablesApiUpdateEquityGrantForEmployee
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof TablesApiUpdateEquityGrantForEmployee
    */
    readonly entryId: number
    /**
    * 
    * @type {EquityEntry}
    * @memberof TablesApiUpdateEquityGrantForEmployee
    */
    readonly requestBody: EquityEntry
}

/**
 * Request parameters for updateWorkEntry operation in TablesApi.
 * @export
 * @interface TablesApiUpdateWorkEntryRequest
 */
export type TablesApiUpdateWorkEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof TablesApiUpdateWorkEntry
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof TablesApiUpdateWorkEntry
    */
    readonly entryId: number
    /**
    * 
    * @type {WorkEntry}
    * @memberof TablesApiUpdateWorkEntry
    */
    readonly requestBody: WorkEntry
}

/**
 * TablesApiGenerated - object-oriented interface
 * @export
 * @class TablesApiGenerated
 * @extends {BaseAPI}
 */
export class TablesApiGenerated extends BaseAPI {
    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new employment entry for a given employee.
     * @param {TablesApiCreateEmploymentEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public createEmploymentEntry(requestParameters: TablesApiCreateEmploymentEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).createEmploymentEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new equity grant for a given employee.
     * @param {TablesApiCreateEquityGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public createEquityGrant(requestParameters: TablesApiCreateEquityGrantRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).createEquityGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new salary entry for a given employee.
     * @param {TablesApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public createNewSalaryEntry(requestParameters: TablesApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).createNewSalaryEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new training records for a given employee
     * @param {TablesApiCreateTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public createTrainingRecord(requestParameters: TablesApiCreateTrainingRecordRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).createTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new variable payment for a given employee.
     * @param {TablesApiCreateVariablePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public createVariablePayment(requestParameters: TablesApiCreateVariablePaymentRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).createVariablePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new work entry for a given employee.
     * @param {TablesApiCreateWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public createWorkEntry(requestParameters: TablesApiCreateWorkEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).createWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an employment entry from a given employee\'s employment history.
     * @param {TablesApiDeleteEmploymentEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public deleteEmploymentEntry(requestParameters: TablesApiDeleteEmploymentEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).deleteEmploymentEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an equity grant for an employee.
     * @param {TablesApiDeleteEquityGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public deleteEquityGrant(requestParameters: TablesApiDeleteEquityGrantRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).deleteEquityGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a salary entry from the employee\'s list.
     * @param {TablesApiDeleteSalaryEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public deleteSalaryEntry(requestParameters: TablesApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).deleteSalaryEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a training record for an employee.
     * @param {TablesApiDeleteTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public deleteTrainingRecord(requestParameters: TablesApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).deleteTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes any training records for an employee.
     * @param {TablesApiDeleteTrainingRecord0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public deleteTrainingRecord_1(requestParameters: TablesApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).deleteTrainingRecord_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a work entry from a given employee\'s work history.
     * @param {TablesApiDeleteWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public deleteWorkEntry(requestParameters: TablesApiDeleteWorkEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).deleteWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Note:</b> Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the <a href=\'https://help.hibob.com/hc/en-us/articles/19726260483601\'>Working pattern API Changes</a>  article in the help center.<br> <br>Returns a list of employment history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s employment history.
     * @param {TablesApiGetEmploymentHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public getEmploymentHistory(requestParameters: TablesApiGetEmploymentHistoryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).getEmploymentHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s salary history.
     * @param {TablesApiGetSalaryHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public getSalaryHistory(requestParameters: TablesApiGetSalaryHistoryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).getSalaryHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of work history entries for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s work history
     * @param {TablesApiGetWorkHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public getWorkHistory(requestParameters: TablesApiGetWorkHistoryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).getWorkHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of life-cycle history entries for a given employee.<br /><br><br><b>Note</b>: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s life-cycle status history.
     * @param {TablesApiListEmployeeLifecycleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public listEmployeeLifecycle(requestParameters: TablesApiListEmployeeLifecycleRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).listEmployeeLifecycle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List the employee\'s equity grants.
     * @param {TablesApiListEquityGrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public listEquityGrants(requestParameters: TablesApiListEquityGrantsRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).listEquityGrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List the employee\'s training records.
     * @param {TablesApiListTrainingRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public listTrainingRecords(requestParameters: TablesApiListTrainingRecordsRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).listTrainingRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s variable payments
     * @param {TablesApiListVariablePaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public listVariablePayments(requestParameters: TablesApiListVariablePaymentsRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).listVariablePayments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Updates an employment entry from a given employee\'s employment history.
     * @param {TablesApiUpdateEmploymentEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public updateEmploymentEntry(requestParameters: TablesApiUpdateEmploymentEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).updateEmploymentEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
     * @summary Updates an equity grant for an employee
     * @param {TablesApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public updateEquityGrantForEmployee(requestParameters: TablesApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).updateEquityGrantForEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Updates a work entry from employee\'s work history
     * @param {TablesApiUpdateWorkEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApiGenerated
     */
    public updateWorkEntry(requestParameters: TablesApiUpdateWorkEntryRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).updateWorkEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
