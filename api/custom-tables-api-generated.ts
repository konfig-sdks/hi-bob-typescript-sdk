/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomTableEntriesList } from '../models';
// @ts-ignore
import { CustomTablesCreateNewEntryRequest } from '../models';
// @ts-ignore
import { CustomTablesUpdateEntryRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomTablesApi - axios parameter creator
 * @export
 */
export const CustomTablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new custom table entry
         * @param {string} employeeId Employee ID.
         * @param {string} customTableId The ID of custom table.
         * @param {CustomTablesCreateNewEntryRequest} values 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEntry: async (employeeId: string, customTableId: string, values: CustomTablesCreateNewEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createNewEntry', 'employeeId', employeeId)
            // verify required parameter 'customTableId' is not null or undefined
            assertParamExists('createNewEntry', 'customTableId', customTableId)
            // verify required parameter 'values' is not null or undefined
            assertParamExists('createNewEntry', 'values', values)
            const localVarPath = `/people/custom-tables/{employee_id}/{custom_table_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"custom_table_id"}}`, encodeURIComponent(String(customTableId !== undefined ? customTableId : `-custom_table_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: values,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/custom-tables/{employee_id}/{custom_table_id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(values, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete custom table entry
         * @param {string} employeeId Employee ID.
         * @param {string} customTableId The ID of custom table.
         * @param {string} entryId The ID of custom table entry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryById: async (employeeId: string, customTableId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteEntryById', 'employeeId', employeeId)
            // verify required parameter 'customTableId' is not null or undefined
            assertParamExists('deleteEntryById', 'customTableId', customTableId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEntryById', 'entryId', entryId)
            const localVarPath = `/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"custom_table_id"}}`, encodeURIComponent(String(customTableId !== undefined ? customTableId : `-custom_table_id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all entries of the given custom table
         * @param {string} employeeId Employee ID.
         * @param {string} customTableId The ID of custom table.
         * @param {boolean} [includeHumanReadable] Whether to include the additional \&quot;humanReadable\&quot; JSON node in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEntries: async (employeeId: string, customTableId: string, includeHumanReadable?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('readEntries', 'employeeId', employeeId)
            // verify required parameter 'customTableId' is not null or undefined
            assertParamExists('readEntries', 'customTableId', customTableId)
            const localVarPath = `/people/custom-tables/{employee_id}/{custom_table_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"custom_table_id"}}`, encodeURIComponent(String(customTableId !== undefined ? customTableId : `-custom_table_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (includeHumanReadable !== undefined) {
                localVarQueryParameter['includeHumanReadable'] = includeHumanReadable;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/custom-tables/{employee_id}/{custom_table_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update custom table entry
         * @param {string} employeeId Employee ID.
         * @param {string} customTableId The ID of custom table.
         * @param {string} entryId The ID of custom table entry.
         * @param {CustomTablesUpdateEntryRequest} [entry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntry: async (employeeId: string, customTableId: string, entryId: string, entry?: CustomTablesUpdateEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEntry', 'employeeId', employeeId)
            // verify required parameter 'customTableId' is not null or undefined
            assertParamExists('updateEntry', 'customTableId', customTableId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEntry', 'entryId', entryId)
            const localVarPath = `/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"custom_table_id"}}`, encodeURIComponent(String(customTableId !== undefined ? customTableId : `-custom_table_id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomTablesApi - functional programming interface
 * @export
 */
export const CustomTablesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomTablesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new custom table entry
         * @param {CustomTablesApiCreateNewEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewEntry(requestParameters: CustomTablesApiCreateNewEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const values: CustomTablesCreateNewEntryRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewEntry(requestParameters.employeeId, requestParameters.customTableId, values, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete custom table entry
         * @param {CustomTablesApiDeleteEntryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntryById(requestParameters: CustomTablesApiDeleteEntryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntryById(requestParameters.employeeId, requestParameters.customTableId, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read all entries of the given custom table
         * @param {CustomTablesApiReadEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEntries(requestParameters: CustomTablesApiReadEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomTableEntriesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEntries(requestParameters.employeeId, requestParameters.customTableId, requestParameters.includeHumanReadable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update custom table entry
         * @param {CustomTablesApiUpdateEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntry(requestParameters: CustomTablesApiUpdateEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: CustomTablesUpdateEntryRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntry(requestParameters.employeeId, requestParameters.customTableId, requestParameters.entryId, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomTablesApi - factory interface
 * @export
 */
export const CustomTablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomTablesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new custom table entry
         * @param {CustomTablesApiCreateNewEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewEntry(requestParameters: CustomTablesApiCreateNewEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete custom table entry
         * @param {CustomTablesApiDeleteEntryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntryById(requestParameters: CustomTablesApiDeleteEntryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEntryById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all entries of the given custom table
         * @param {CustomTablesApiReadEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEntries(requestParameters: CustomTablesApiReadEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<CustomTableEntriesList> {
            return localVarFp.readEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update custom table entry
         * @param {CustomTablesApiUpdateEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntry(requestParameters: CustomTablesApiUpdateEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewEntry operation in CustomTablesApi.
 * @export
 * @interface CustomTablesApiCreateNewEntryRequest
 */
export type CustomTablesApiCreateNewEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof CustomTablesApiCreateNewEntry
    */
    readonly employeeId: string
    
    /**
    * The ID of custom table.
    * @type {string}
    * @memberof CustomTablesApiCreateNewEntry
    */
    readonly customTableId: string
    
} & CustomTablesCreateNewEntryRequest

/**
 * Request parameters for deleteEntryById operation in CustomTablesApi.
 * @export
 * @interface CustomTablesApiDeleteEntryByIdRequest
 */
export type CustomTablesApiDeleteEntryByIdRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof CustomTablesApiDeleteEntryById
    */
    readonly employeeId: string
    
    /**
    * The ID of custom table.
    * @type {string}
    * @memberof CustomTablesApiDeleteEntryById
    */
    readonly customTableId: string
    
    /**
    * The ID of custom table entry.
    * @type {string}
    * @memberof CustomTablesApiDeleteEntryById
    */
    readonly entryId: string
    
}

/**
 * Request parameters for readEntries operation in CustomTablesApi.
 * @export
 * @interface CustomTablesApiReadEntriesRequest
 */
export type CustomTablesApiReadEntriesRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof CustomTablesApiReadEntries
    */
    readonly employeeId: string
    
    /**
    * The ID of custom table.
    * @type {string}
    * @memberof CustomTablesApiReadEntries
    */
    readonly customTableId: string
    
    /**
    * Whether to include the additional \"humanReadable\" JSON node in the response.
    * @type {boolean}
    * @memberof CustomTablesApiReadEntries
    */
    readonly includeHumanReadable?: boolean
    
}

/**
 * Request parameters for updateEntry operation in CustomTablesApi.
 * @export
 * @interface CustomTablesApiUpdateEntryRequest
 */
export type CustomTablesApiUpdateEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof CustomTablesApiUpdateEntry
    */
    readonly employeeId: string
    
    /**
    * The ID of custom table.
    * @type {string}
    * @memberof CustomTablesApiUpdateEntry
    */
    readonly customTableId: string
    
    /**
    * The ID of custom table entry.
    * @type {string}
    * @memberof CustomTablesApiUpdateEntry
    */
    readonly entryId: string
    
} & CustomTablesUpdateEntryRequest

/**
 * CustomTablesApiGenerated - object-oriented interface
 * @export
 * @class CustomTablesApiGenerated
 * @extends {BaseAPI}
 */
export class CustomTablesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create new custom table entry
     * @param {CustomTablesApiCreateNewEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTablesApiGenerated
     */
    public createNewEntry(requestParameters: CustomTablesApiCreateNewEntryRequest, options?: AxiosRequestConfig) {
        return CustomTablesApiFp(this.configuration).createNewEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete custom table entry
     * @param {CustomTablesApiDeleteEntryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTablesApiGenerated
     */
    public deleteEntryById(requestParameters: CustomTablesApiDeleteEntryByIdRequest, options?: AxiosRequestConfig) {
        return CustomTablesApiFp(this.configuration).deleteEntryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all entries of the given custom table
     * @param {CustomTablesApiReadEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTablesApiGenerated
     */
    public readEntries(requestParameters: CustomTablesApiReadEntriesRequest, options?: AxiosRequestConfig) {
        return CustomTablesApiFp(this.configuration).readEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update custom table entry
     * @param {CustomTablesApiUpdateEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTablesApiGenerated
     */
    public updateEntry(requestParameters: CustomTablesApiUpdateEntryRequest, options?: AxiosRequestConfig) {
        return CustomTablesApiFp(this.configuration).updateEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
