/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CurrencyValue } from '../models';
// @ts-ignore
import { Employees } from '../models';
// @ts-ignore
import { EquityEntries } from '../models';
// @ts-ignore
import { EquityEntry } from '../models';
// @ts-ignore
import { SalaryEntries } from '../models';
// @ts-ignore
import { SalaryEntry } from '../models';
// @ts-ignore
import { TrainingEntries } from '../models';
// @ts-ignore
import { TrainingEntry } from '../models';
// @ts-ignore
import { VariableEntries } from '../models';
// @ts-ignore
import { VariableEntry } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollApi - axios parameter creator
 * @export
 */
export const PayrollApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {string} id Employee ID.
         * @param {EquityEntry} entry Equity grant to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquityGrant: async (id: string, entry: EquityEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createEquityGrant', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createEquityGrant', 'entry', entry)
            const localVarPath = `/people/{id}/equities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {string} id Employee ID.
         * @param {SalaryEntry} entry Salary entry to add. This must not conflict with another entry on the same effective date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSalaryEntry: async (id: string, entry: SalaryEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createNewSalaryEntry', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createNewSalaryEntry', 'entry', entry)
            const localVarPath = `/people/{id}/salaries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {string} id Employee ID.
         * @param {TrainingEntry} entry Training entry to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrainingRecord: async (id: string, entry: TrainingEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createTrainingRecord', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createTrainingRecord', 'entry', entry)
            const localVarPath = `/people/{id}/training`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {string} id Employee ID.
         * @param {VariableEntry} entry Variable payment to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariablePayment: async (id: string, entry: VariableEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createVariablePayment', 'id', id)
            // verify required parameter 'entry' is not null or undefined
            assertParamExists('createVariablePayment', 'entry', entry)
            const localVarPath = `/people/{id}/variable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: entry,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(entry, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquityGrant: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEquityGrant', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteEquityGrant', 'entryId', entryId)
            const localVarPath = `/people/{id}/equities/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {string} id Employee ID.
         * @param {number} entryId The entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryEntry: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSalaryEntry', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteSalaryEntry', 'entryId', entryId)
            const localVarPath = `/people/{id}/salaries/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainingRecord', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteTrainingRecord', 'entryId', entryId)
            const localVarPath = `/people/{id}/variable/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {string} id Employee ID.
         * @param {number} entryId The Entry ID to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord_1: async (id: string, entryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainingRecord_1', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteTrainingRecord_1', 'entryId', entryId)
            const localVarPath = `/people/{id}/training/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training/{entry_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryHistory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSalaryHistory', 'id', id)
            const localVarPath = `/people/{id}/salaries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/salaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquityGrants: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEquityGrants', 'id', id)
            const localVarPath = `/people/{id}/equities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrainingRecords: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTrainingRecords', 'id', id)
            const localVarPath = `/people/{id}/training`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/training',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablePayments: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVariablePayments', 'id', id)
            const localVarPath = `/people/{id}/variable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/variable',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read payroll history.
         * @param {string} [department] filter payroll for specific department.
         * @param {boolean} [showInactive] Whether to include inactive employees in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readHistory: async (department?: string, showInactive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payroll/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (department !== undefined) {
                localVarQueryParameter['department'] = department;
            }

            if (showInactive !== undefined) {
                localVarQueryParameter['showInactive'] = showInactive;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {string} id Employee ID
         * @param {number} entryId The entry ID to update.
         * @param {EquityEntry} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquityGrantForEmployee: async (id: string, entryId: number, body: EquityEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'id', id)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'entryId', entryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEquityGrantForEmployee', 'body', body)
            const localVarPath = `/people/{id}/equities/{entry_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"entry_id"}}`, encodeURIComponent(String(entryId !== undefined ? entryId : `-entry_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}/equities/{entry_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollApi - functional programming interface
 * @export
 */
export const PayrollApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollApiAxiosParamCreator(configuration)
    return {
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {PayrollApiCreateEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEquityGrant(requestParameters: PayrollApiCreateEquityGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: EquityEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEquityGrant(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {PayrollApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSalaryEntry(requestParameters: PayrollApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: SalaryEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSalaryEntry(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {PayrollApiCreateTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrainingRecord(requestParameters: PayrollApiCreateTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: TrainingEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrainingRecord(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {PayrollApiCreateVariablePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariablePayment(requestParameters: PayrollApiCreateVariablePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const entry: VariableEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVariablePayment(requestParameters.id, entry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {PayrollApiDeleteEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEquityGrant(requestParameters: PayrollApiDeleteEquityGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEquityGrant(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {PayrollApiDeleteSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSalaryEntry(requestParameters: PayrollApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSalaryEntry(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {PayrollApiDeleteTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainingRecord(requestParameters: PayrollApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainingRecord(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {PayrollApiDeleteTrainingRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainingRecord_1(requestParameters: PayrollApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainingRecord_1(requestParameters.id, requestParameters.entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {PayrollApiGetSalaryHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalaryHistory(requestParameters: PayrollApiGetSalaryHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalaryEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalaryHistory(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {PayrollApiListEquityGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEquityGrants(requestParameters: PayrollApiListEquityGrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquityEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEquityGrants(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {PayrollApiListTrainingRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrainingRecords(requestParameters: PayrollApiListTrainingRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrainingRecords(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {PayrollApiListVariablePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariablePayments(requestParameters: PayrollApiListVariablePaymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableEntries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariablePayments(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read payroll history.
         * @param {PayrollApiReadHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readHistory(requestParameters: PayrollApiReadHistoryRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employees>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readHistory(requestParameters.department, requestParameters.showInactive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {PayrollApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEquityGrantForEmployee(requestParameters: PayrollApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: EquityEntry = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEquityGrantForEmployee(requestParameters.id, requestParameters.entryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollApi - factory interface
 * @export
 */
export const PayrollApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollApiFp(configuration)
    return {
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new equity grant for a given employee.
         * @param {PayrollApiCreateEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEquityGrant(requestParameters: PayrollApiCreateEquityGrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEquityGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new salary entry for a given employee.
         * @param {PayrollApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSalaryEntry(requestParameters: PayrollApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewSalaryEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new training records for a given employee
         * @param {PayrollApiCreateTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrainingRecord(requestParameters: PayrollApiCreateTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary Creates a new variable payment for a given employee.
         * @param {PayrollApiCreateVariablePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariablePayment(requestParameters: PayrollApiCreateVariablePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createVariablePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an equity grant for an employee.
         * @param {PayrollApiDeleteEquityGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEquityGrant(requestParameters: PayrollApiDeleteEquityGrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEquityGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a salary entry from the employee\'s list.
         * @param {PayrollApiDeleteSalaryEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSalaryEntry(requestParameters: PayrollApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSalaryEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a training record for an employee.
         * @param {PayrollApiDeleteTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord(requestParameters: PayrollApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes any training records for an employee.
         * @param {PayrollApiDeleteTrainingRecord0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainingRecord_1(requestParameters: PayrollApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrainingRecord_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s salary history.
         * @param {PayrollApiGetSalaryHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalaryHistory(requestParameters: PayrollApiGetSalaryHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<SalaryEntries> {
            return localVarFp.getSalaryHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s equity grants.
         * @param {PayrollApiListEquityGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquityGrants(requestParameters: PayrollApiListEquityGrantsRequest, options?: AxiosRequestConfig): AxiosPromise<EquityEntries> {
            return localVarFp.listEquityGrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List the employee\'s training records.
         * @param {PayrollApiListTrainingRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrainingRecords(requestParameters: PayrollApiListTrainingRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingEntries> {
            return localVarFp.listTrainingRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
         * @summary List employee\'s variable payments
         * @param {PayrollApiListVariablePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariablePayments(requestParameters: PayrollApiListVariablePaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<VariableEntries> {
            return localVarFp.listVariablePayments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read payroll history.
         * @param {PayrollApiReadHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readHistory(requestParameters: PayrollApiReadHistoryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Employees> {
            return localVarFp.readHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
         * @summary Updates an equity grant for an employee
         * @param {PayrollApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEquityGrantForEmployee(requestParameters: PayrollApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEquityGrantForEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEquityGrant operation in PayrollApi.
 * @export
 * @interface PayrollApiCreateEquityGrantRequest
 */
export type PayrollApiCreateEquityGrantRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiCreateEquityGrant
    */
    readonly id: string
    /**
    * Equity grant to add.
    * @type {EquityEntry}
    * @memberof PayrollApiCreateEquityGrant
    */
    readonly requestBody: EquityEntry
}

/**
 * Request parameters for createNewSalaryEntry operation in PayrollApi.
 * @export
 * @interface PayrollApiCreateNewSalaryEntryRequest
 */
export type PayrollApiCreateNewSalaryEntryRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiCreateNewSalaryEntry
    */
    readonly id: string
    /**
    * Salary entry to add. This must not conflict with another entry on the same effective date.
    * @type {SalaryEntry}
    * @memberof PayrollApiCreateNewSalaryEntry
    */
    readonly requestBody: SalaryEntry
}

/**
 * Request parameters for createTrainingRecord operation in PayrollApi.
 * @export
 * @interface PayrollApiCreateTrainingRecordRequest
 */
export type PayrollApiCreateTrainingRecordRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiCreateTrainingRecord
    */
    readonly id: string
    /**
    * Training entry to add.
    * @type {TrainingEntry}
    * @memberof PayrollApiCreateTrainingRecord
    */
    readonly requestBody: TrainingEntry
}

/**
 * Request parameters for createVariablePayment operation in PayrollApi.
 * @export
 * @interface PayrollApiCreateVariablePaymentRequest
 */
export type PayrollApiCreateVariablePaymentRequest = {
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiCreateVariablePayment
    */
    readonly id: string
    /**
    * Variable payment to add.
    * @type {VariableEntry}
    * @memberof PayrollApiCreateVariablePayment
    */
    readonly requestBody: VariableEntry
}

/**
 * Request parameters for deleteEquityGrant operation in PayrollApi.
 * @export
 * @interface PayrollApiDeleteEquityGrantRequest
 */
export type PayrollApiDeleteEquityGrantRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiDeleteEquityGrant
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof PayrollApiDeleteEquityGrant
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteSalaryEntry operation in PayrollApi.
 * @export
 * @interface PayrollApiDeleteSalaryEntryRequest
 */
export type PayrollApiDeleteSalaryEntryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiDeleteSalaryEntry
    */
    readonly id: string
    
    /**
    * The entry ID to delete.
    * @type {number}
    * @memberof PayrollApiDeleteSalaryEntry
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteTrainingRecord operation in PayrollApi.
 * @export
 * @interface PayrollApiDeleteTrainingRecordRequest
 */
export type PayrollApiDeleteTrainingRecordRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiDeleteTrainingRecord
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof PayrollApiDeleteTrainingRecord
    */
    readonly entryId: number
    
}

/**
 * Request parameters for deleteTrainingRecord_1 operation in PayrollApi.
 * @export
 * @interface PayrollApiDeleteTrainingRecord0Request
 */
export type PayrollApiDeleteTrainingRecord0Request = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiDeleteTrainingRecord0
    */
    readonly id: string
    
    /**
    * The Entry ID to delete.
    * @type {number}
    * @memberof PayrollApiDeleteTrainingRecord0
    */
    readonly entryId: number
    
}

/**
 * Request parameters for getSalaryHistory operation in PayrollApi.
 * @export
 * @interface PayrollApiGetSalaryHistoryRequest
 */
export type PayrollApiGetSalaryHistoryRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiGetSalaryHistory
    */
    readonly id: string
    
}

/**
 * Request parameters for listEquityGrants operation in PayrollApi.
 * @export
 * @interface PayrollApiListEquityGrantsRequest
 */
export type PayrollApiListEquityGrantsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiListEquityGrants
    */
    readonly id: string
    
}

/**
 * Request parameters for listTrainingRecords operation in PayrollApi.
 * @export
 * @interface PayrollApiListTrainingRecordsRequest
 */
export type PayrollApiListTrainingRecordsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiListTrainingRecords
    */
    readonly id: string
    
}

/**
 * Request parameters for listVariablePayments operation in PayrollApi.
 * @export
 * @interface PayrollApiListVariablePaymentsRequest
 */
export type PayrollApiListVariablePaymentsRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof PayrollApiListVariablePayments
    */
    readonly id: string
    
}

/**
 * Request parameters for readHistory operation in PayrollApi.
 * @export
 * @interface PayrollApiReadHistoryRequest
 */
export type PayrollApiReadHistoryRequest = {
    
    /**
    * filter payroll for specific department.
    * @type {string}
    * @memberof PayrollApiReadHistory
    */
    readonly department?: string
    
    /**
    * Whether to include inactive employees in the response.
    * @type {boolean}
    * @memberof PayrollApiReadHistory
    */
    readonly showInactive?: boolean
    
}

/**
 * Request parameters for updateEquityGrantForEmployee operation in PayrollApi.
 * @export
 * @interface PayrollApiUpdateEquityGrantForEmployeeRequest
 */
export type PayrollApiUpdateEquityGrantForEmployeeRequest = {
    /**
    * Employee ID
    * @type {string}
    * @memberof PayrollApiUpdateEquityGrantForEmployee
    */
    readonly id: string
    /**
    * The entry ID to update.
    * @type {number}
    * @memberof PayrollApiUpdateEquityGrantForEmployee
    */
    readonly entryId: number
    /**
    * 
    * @type {EquityEntry}
    * @memberof PayrollApiUpdateEquityGrantForEmployee
    */
    readonly requestBody: EquityEntry
}

/**
 * PayrollApiGenerated - object-oriented interface
 * @export
 * @class PayrollApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollApiGenerated extends BaseAPI {
    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new equity grant for a given employee.
     * @param {PayrollApiCreateEquityGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public createEquityGrant(requestParameters: PayrollApiCreateEquityGrantRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).createEquityGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new salary entry for a given employee.
     * @param {PayrollApiCreateNewSalaryEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public createNewSalaryEntry(requestParameters: PayrollApiCreateNewSalaryEntryRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).createNewSalaryEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new training records for a given employee
     * @param {PayrollApiCreateTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public createTrainingRecord(requestParameters: PayrollApiCreateTrainingRecordRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).createTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary Creates a new variable payment for a given employee.
     * @param {PayrollApiCreateVariablePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public createVariablePayment(requestParameters: PayrollApiCreateVariablePaymentRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).createVariablePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an equity grant for an employee.
     * @param {PayrollApiDeleteEquityGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public deleteEquityGrant(requestParameters: PayrollApiDeleteEquityGrantRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).deleteEquityGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a salary entry from the employee\'s list.
     * @param {PayrollApiDeleteSalaryEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public deleteSalaryEntry(requestParameters: PayrollApiDeleteSalaryEntryRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).deleteSalaryEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a training record for an employee.
     * @param {PayrollApiDeleteTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public deleteTrainingRecord(requestParameters: PayrollApiDeleteTrainingRecordRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).deleteTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes any training records for an employee.
     * @param {PayrollApiDeleteTrainingRecord0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public deleteTrainingRecord_1(requestParameters: PayrollApiDeleteTrainingRecord0Request, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).deleteTrainingRecord_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of salary history entries for a given employee.<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s salary history.
     * @param {PayrollApiGetSalaryHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getSalaryHistory(requestParameters: PayrollApiGetSalaryHistoryRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getSalaryHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of equity grants for a given employee.<br /><b>Supported user types:</b> Service<br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List the employee\'s equity grants.
     * @param {PayrollApiListEquityGrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public listEquityGrants(requestParameters: PayrollApiListEquityGrantsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).listEquityGrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of training records for a given employee<br /><br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List the employee\'s training records.
     * @param {PayrollApiListTrainingRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public listTrainingRecords(requestParameters: PayrollApiListTrainingRecordsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).listTrainingRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of variable payments for a given employee.<br /><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>.
     * @summary List employee\'s variable payments
     * @param {PayrollApiListVariablePaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public listVariablePayments(requestParameters: PayrollApiListVariablePaymentsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).listVariablePayments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read payroll history.
     * @param {PayrollApiReadHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public readHistory(requestParameters: PayrollApiReadHistoryRequest = {}, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).readHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <br><br><b>Note</b>: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see <a href=\'https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api\'>How to work with lists Public API</a>. - Basic: [] - Bearer: []
     * @summary Updates an equity grant for an employee
     * @param {PayrollApiUpdateEquityGrantForEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public updateEquityGrantForEmployee(requestParameters: PayrollApiUpdateEquityGrantForEmployeeRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).updateEquityGrantForEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
