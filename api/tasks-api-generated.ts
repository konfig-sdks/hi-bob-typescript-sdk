/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Tasks } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Mark a task as complete
         * @param {string} taskId task id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTask: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('completeTask', 'taskId', taskId)
            const localVarPath = `/tasks/{taskId}/complete`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId !== undefined ? taskId : `-taskId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{taskId}/complete',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <b>Supported user types:</b> Employee.
         * @summary Read my tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTasks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "bearer", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/my/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all open tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenTasks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read tasks of a specific employee 
         * @param {string} id employee id
         * @param {'open' | 'closed'} [taskStatus] filter tasks by open / closed status. Not sending task_status will return all tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmployeeTasks: async (id: string, taskStatus?: 'open' | 'closed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('readEmployeeTasks', 'id', id)
            const localVarPath = `/tasks/people/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (taskStatus !== undefined) {
                localVarQueryParameter['task_status'] = taskStatus;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/people/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Mark a task as complete
         * @param {TasksApiCompleteTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeTask(requestParameters: TasksApiCompleteTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tasks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeTask(requestParameters.taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <b>Supported user types:</b> Employee.
         * @summary Read my tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTasks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tasks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read all open tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpenTasks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tasks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpenTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read tasks of a specific employee 
         * @param {TasksApiReadEmployeeTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEmployeeTasks(requestParameters: TasksApiReadEmployeeTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tasks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEmployeeTasks(requestParameters.id, requestParameters.taskStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * 
         * @summary Mark a task as complete
         * @param {TasksApiCompleteTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTask(requestParameters: TasksApiCompleteTaskRequest, options?: AxiosRequestConfig): AxiosPromise<Tasks> {
            return localVarFp.completeTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * <b>Supported user types:</b> Employee.
         * @summary Read my tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTasks(options?: AxiosRequestConfig): AxiosPromise<Tasks> {
            return localVarFp.getEmployeeTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all open tasks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenTasks(options?: AxiosRequestConfig): AxiosPromise<Tasks> {
            return localVarFp.getOpenTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read tasks of a specific employee 
         * @param {TasksApiReadEmployeeTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmployeeTasks(requestParameters: TasksApiReadEmployeeTasksRequest, options?: AxiosRequestConfig): AxiosPromise<Tasks> {
            return localVarFp.readEmployeeTasks(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for completeTask operation in TasksApi.
 * @export
 * @interface TasksApiCompleteTaskRequest
 */
export type TasksApiCompleteTaskRequest = {
    
    /**
    * task id
    * @type {string}
    * @memberof TasksApiCompleteTask
    */
    readonly taskId: string
    
}

/**
 * Request parameters for readEmployeeTasks operation in TasksApi.
 * @export
 * @interface TasksApiReadEmployeeTasksRequest
 */
export type TasksApiReadEmployeeTasksRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof TasksApiReadEmployeeTasks
    */
    readonly id: string
    
    /**
    * filter tasks by open / closed status. Not sending task_status will return all tasks.
    * @type {'open' | 'closed'}
    * @memberof TasksApiReadEmployeeTasks
    */
    readonly taskStatus?: 'open' | 'closed'
    
}

/**
 * TasksApiGenerated - object-oriented interface
 * @export
 * @class TasksApiGenerated
 * @extends {BaseAPI}
 */
export class TasksApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Mark a task as complete
     * @param {TasksApiCompleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public completeTask(requestParameters: TasksApiCompleteTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).completeTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <b>Supported user types:</b> Employee.
     * @summary Read my tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getEmployeeTasks(options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getEmployeeTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all open tasks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getOpenTasks(options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getOpenTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read tasks of a specific employee 
     * @param {TasksApiReadEmployeeTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public readEmployeeTasks(requestParameters: TasksApiReadEmployeeTasksRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).readEmployeeTasks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
