/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Reports } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a report data file in the specified format.<br /><b>Supported user types:</b> Service.
         * @summary Download the report by ID
         * @param {number} reportId Report ID
         * @param {'csv' | 'xlsx' | 'json'} format File format
         * @param {boolean} [includeInfo] Should include info.
         * @param {string} [locale] Requested language for the report columns in the format of locale (e.g. fr-FR). If this is not provided, the user preferences locale is used.
         * @param {string} [humanReadable] Optional field. Only enforced when &lt;i&gt;&lt;b&gt;format&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;json&lt;/i&gt;. &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \&quot;humanReadable\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadById: async (reportId: number, format: 'csv' | 'xlsx' | 'json', includeInfo?: boolean, locale?: string, humanReadable?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('downloadById', 'reportId', reportId)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('downloadById', 'format', format)
            const localVarPath = `/company/reports/{reportId}/download`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-reportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (includeInfo !== undefined) {
                localVarQueryParameter['includeInfo'] = includeInfo;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (humanReadable !== undefined) {
                localVarQueryParameter['humanReadable'] = humanReadable;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/reports/{reportId}/download',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.<br />(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
         * @summary Download report by file URL
         * @param {string} reportName Report name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReportFile: async (reportName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportName' is not null or undefined
            assertParamExists('downloadReportFile', 'reportName', reportName)
            const localVarPath = `/company/reports/download/{reportName}`
                .replace(`{${"reportName"}}`, encodeURIComponent(String(reportName !== undefined ? reportName : `-reportName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/reports/download/{reportName}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the polling URL report file of the specified format under \"Location\" in the response header.<br />
         * @summary Get the report download URL for polling
         * @param {number} reportId Report id
         * @param {'csv' | 'xlsx'} format File format
         * @param {boolean} [includeInfo] Should include info
         * @param {string} [locale] Requested language for the report columns in the format of the locale (e.g. fr-FR). If this is not provided, the user preferences locale is used.
         * @param {string} [humanReadable] Optional field. Only enforced when &lt;i&gt;&lt;b&gt;format&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;json&lt;/i&gt;. &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \&quot;humanReadable\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl: async (reportId: number, format: 'csv' | 'xlsx', includeInfo?: boolean, locale?: string, humanReadable?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getDownloadUrl', 'reportId', reportId)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('getDownloadUrl', 'format', format)
            const localVarPath = `/company/reports/{reportId}/download-async`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-reportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (includeInfo !== undefined) {
                localVarQueryParameter['includeInfo'] = includeInfo;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (humanReadable !== undefined) {
                localVarQueryParameter['humanReadable'] = humanReadable;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/reports/{reportId}/download-async',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.<br />
         * @summary Read company reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleReports: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a report data file in the specified format.<br /><b>Supported user types:</b> Service.
         * @summary Download the report by ID
         * @param {ReportsApiDownloadByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadById(requestParameters: ReportsApiDownloadByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadById(requestParameters.reportId, requestParameters.format, requestParameters.includeInfo, requestParameters.locale, requestParameters.humanReadable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.<br />(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
         * @summary Download report by file URL
         * @param {ReportsApiDownloadReportFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadReportFile(requestParameters: ReportsApiDownloadReportFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadReportFile(requestParameters.reportName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the polling URL report file of the specified format under \"Location\" in the response header.<br />
         * @summary Get the report download URL for polling
         * @param {ReportsApiGetDownloadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDownloadUrl(requestParameters: ReportsApiGetDownloadUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDownloadUrl(requestParameters.reportId, requestParameters.format, requestParameters.includeInfo, requestParameters.locale, requestParameters.humanReadable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.<br />
         * @summary Read company reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessibleReports(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reports>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessibleReports(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Returns a report data file in the specified format.<br /><b>Supported user types:</b> Service.
         * @summary Download the report by ID
         * @param {ReportsApiDownloadByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadById(requestParameters: ReportsApiDownloadByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.downloadById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.<br />(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
         * @summary Download report by file URL
         * @param {ReportsApiDownloadReportFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadReportFile(requestParameters: ReportsApiDownloadReportFileRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.downloadReportFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the polling URL report file of the specified format under \"Location\" in the response header.<br />
         * @summary Get the report download URL for polling
         * @param {ReportsApiGetDownloadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDownloadUrl(requestParameters: ReportsApiGetDownloadUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDownloadUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.<br />
         * @summary Read company reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessibleReports(options?: AxiosRequestConfig): AxiosPromise<Reports> {
            return localVarFp.listAccessibleReports(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadById operation in ReportsApi.
 * @export
 * @interface ReportsApiDownloadByIdRequest
 */
export type ReportsApiDownloadByIdRequest = {
    
    /**
    * Report ID
    * @type {number}
    * @memberof ReportsApiDownloadById
    */
    readonly reportId: number
    
    /**
    * File format
    * @type {'csv' | 'xlsx' | 'json'}
    * @memberof ReportsApiDownloadById
    */
    readonly format: 'csv' | 'xlsx' | 'json'
    
    /**
    * Should include info.
    * @type {boolean}
    * @memberof ReportsApiDownloadById
    */
    readonly includeInfo?: boolean
    
    /**
    * Requested language for the report columns in the format of locale (e.g. fr-FR). If this is not provided, the user preferences locale is used.
    * @type {string}
    * @memberof ReportsApiDownloadById
    */
    readonly locale?: string
    
    /**
    * Optional field. Only enforced when <i><b>format</b></i> is <i>json</i>. <br> <b>If not sent:</b> supply machine-readable values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include the additional \"humanReadable\" JSON node in the response. <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON instead of machine-readable format. <br>
    * @type {string}
    * @memberof ReportsApiDownloadById
    */
    readonly humanReadable?: string
    
}

/**
 * Request parameters for downloadReportFile operation in ReportsApi.
 * @export
 * @interface ReportsApiDownloadReportFileRequest
 */
export type ReportsApiDownloadReportFileRequest = {
    
    /**
    * Report name
    * @type {string}
    * @memberof ReportsApiDownloadReportFile
    */
    readonly reportName: string
    
}

/**
 * Request parameters for getDownloadUrl operation in ReportsApi.
 * @export
 * @interface ReportsApiGetDownloadUrlRequest
 */
export type ReportsApiGetDownloadUrlRequest = {
    
    /**
    * Report id
    * @type {number}
    * @memberof ReportsApiGetDownloadUrl
    */
    readonly reportId: number
    
    /**
    * File format
    * @type {'csv' | 'xlsx'}
    * @memberof ReportsApiGetDownloadUrl
    */
    readonly format: 'csv' | 'xlsx'
    
    /**
    * Should include info
    * @type {boolean}
    * @memberof ReportsApiGetDownloadUrl
    */
    readonly includeInfo?: boolean
    
    /**
    * Requested language for the report columns in the format of the locale (e.g. fr-FR). If this is not provided, the user preferences locale is used.
    * @type {string}
    * @memberof ReportsApiGetDownloadUrl
    */
    readonly locale?: string
    
    /**
    * Optional field. Only enforced when <i><b>format</b></i> is <i>json</i>. <br> <b>If not sent:</b> supply machine-readable values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include the additional \"humanReadable\" JSON node in the response. <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON instead of machine-readable format. <br>
    * @type {string}
    * @memberof ReportsApiGetDownloadUrl
    */
    readonly humanReadable?: string
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * Returns a report data file in the specified format.<br /><b>Supported user types:</b> Service.
     * @summary Download the report by ID
     * @param {ReportsApiDownloadByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public downloadById(requestParameters: ReportsApiDownloadByIdRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).downloadById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.<br />(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)<br />
     * @summary Download report by file URL
     * @param {ReportsApiDownloadReportFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public downloadReportFile(requestParameters: ReportsApiDownloadReportFileRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).downloadReportFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the polling URL report file of the specified format under \"Location\" in the response header.<br />
     * @summary Get the report download URL for polling
     * @param {ReportsApiGetDownloadUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getDownloadUrl(requestParameters: ReportsApiGetDownloadUrlRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getDownloadUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.<br />
     * @summary Read company reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listAccessibleReports(options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listAccessibleReports(options).then((request) => request(this.axios, this.basePath));
    }
}
