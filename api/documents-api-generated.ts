/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDocument } from '../models';
// @ts-ignore
import { DocumentsUploadConfidentialFileRequest } from '../models';
// @ts-ignore
import { DocumentsUploadToSharedFolderRequest } from '../models';
// @ts-ignore
import { EmployeeDocumentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a specific document from the employee\'s confidential folder.
         * @param {string} id Employee ID.
         * @param {string} docId Document ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeeConfidentialDoc: async (id: string, docId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmployeeConfidentialDoc', 'id', id)
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('deleteEmployeeConfidentialDoc', 'docId', docId)
            const localVarPath = `/docs/people/{id}/confidential/{docId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"docId"}}`, encodeURIComponent(String(docId !== undefined ? docId : `-docId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}/confidential/{docId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of documents and download links.<br />
         * @summary Download employee\'s documents
         * @param {string} id Employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadLinks: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadLinks', 'id', id)
            const localVarPath = `/docs/people/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete specific document from the employee\'s shared folder.
         * @param {string} id Employee ID.
         * @param {string} docId Document ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployeeSharedDocument: async (id: string, docId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeEmployeeSharedDocument', 'id', id)
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('removeEmployeeSharedDocument', 'docId', docId)
            const localVarPath = `/docs/people/{id}/shared/{docId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"docId"}}`, encodeURIComponent(String(docId !== undefined ? docId : `-docId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}/shared/{docId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a file to the employee\'s confidential folder.
         * @param {string} id employee id
         * @param {Uint8Array | File | buffer.File} file The file to upload.
         * @param {DocumentsUploadConfidentialFileRequest} documentsUploadConfidentialFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadConfidentialFile: async (id: string, file: Uint8Array | File | buffer.File, documentsUploadConfidentialFileRequest: DocumentsUploadConfidentialFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadConfidentialFile', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadConfidentialFile', 'file', file)
            // verify required parameter 'documentsUploadConfidentialFileRequest' is not null or undefined
            assertParamExists('uploadConfidentialFile', 'documentsUploadConfidentialFileRequest', documentsUploadConfidentialFileRequest)
            const localVarPath = `/docs/people/{id}/confidential/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: documentsUploadConfidentialFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}/confidential/upload',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a document to the employee\'s confidential folder
         * @param {string} id Employee ID.
         * @param {AddDocument} document Document to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadToConfidentialFolder: async (id: string, document: AddDocument, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadToConfidentialFolder', 'id', id)
            // verify required parameter 'document' is not null or undefined
            assertParamExists('uploadToConfidentialFolder', 'document', document)
            const localVarPath = `/docs/people/{id}/confidential`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: document,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}/confidential',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(document, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a document to the employee\'s shared folder
         * @param {string} id Employee ID.
         * @param {AddDocument} document Document to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadToSharedFolder: async (id: string, document: AddDocument, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadToSharedFolder', 'id', id)
            // verify required parameter 'document' is not null or undefined
            assertParamExists('uploadToSharedFolder', 'document', document)
            const localVarPath = `/docs/people/{id}/shared`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: document,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}/shared',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(document, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a file to the employee\'s shared folder.
         * @param {string} id Employee ID.
         * @param {Uint8Array | File | buffer.File} file The file to upload.
         * @param {DocumentsUploadToSharedFolderRequest} documentsUploadToSharedFolderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadToSharedFolder_1: async (id: string, file: Uint8Array | File | buffer.File, documentsUploadToSharedFolderRequest: DocumentsUploadToSharedFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadToSharedFolder_1', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadToSharedFolder_1', 'file', file)
            // verify required parameter 'documentsUploadToSharedFolderRequest' is not null or undefined
            assertParamExists('uploadToSharedFolder_1', 'documentsUploadToSharedFolderRequest', documentsUploadToSharedFolderRequest)
            const localVarPath = `/docs/people/{id}/shared/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: documentsUploadToSharedFolderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/docs/people/{id}/shared/upload',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a specific document from the employee\'s confidential folder.
         * @param {DocumentsApiDeleteEmployeeConfidentialDocRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployeeConfidentialDoc(requestParameters: DocumentsApiDeleteEmployeeConfidentialDocRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployeeConfidentialDoc(requestParameters.id, requestParameters.docId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of documents and download links.<br />
         * @summary Download employee\'s documents
         * @param {DocumentsApiDownloadLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadLinks(requestParameters: DocumentsApiDownloadLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadLinks(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete specific document from the employee\'s shared folder.
         * @param {DocumentsApiRemoveEmployeeSharedDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmployeeSharedDocument(requestParameters: DocumentsApiRemoveEmployeeSharedDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmployeeSharedDocument(requestParameters.id, requestParameters.docId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a file to the employee\'s confidential folder.
         * @param {DocumentsApiUploadConfidentialFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadConfidentialFile(requestParameters: DocumentsApiUploadConfidentialFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const documentsUploadConfidentialFileRequest: DocumentsUploadConfidentialFileRequest = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadConfidentialFile(requestParameters.id, requestParameters.file, documentsUploadConfidentialFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a document to the employee\'s confidential folder
         * @param {DocumentsApiUploadToConfidentialFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadToConfidentialFolder(requestParameters: DocumentsApiUploadToConfidentialFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const document: AddDocument = {
                tags: requestParameters.tags,
                documentName: requestParameters.documentName,
                documentUrl: requestParameters.documentUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadToConfidentialFolder(requestParameters.id, document, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a document to the employee\'s shared folder
         * @param {DocumentsApiUploadToSharedFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadToSharedFolder(requestParameters: DocumentsApiUploadToSharedFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const document: AddDocument = {
                tags: requestParameters.tags,
                documentName: requestParameters.documentName,
                documentUrl: requestParameters.documentUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadToSharedFolder(requestParameters.id, document, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a file to the employee\'s shared folder.
         * @param {DocumentsApiUploadToSharedFolder0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadToSharedFolder_1(requestParameters: DocumentsApiUploadToSharedFolder0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const documentsUploadToSharedFolderRequest: DocumentsUploadToSharedFolderRequest = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadToSharedFolder_1(requestParameters.id, requestParameters.file, documentsUploadToSharedFolderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a specific document from the employee\'s confidential folder.
         * @param {DocumentsApiDeleteEmployeeConfidentialDocRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeeConfidentialDoc(requestParameters: DocumentsApiDeleteEmployeeConfidentialDocRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmployeeConfidentialDoc(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of documents and download links.<br />
         * @summary Download employee\'s documents
         * @param {DocumentsApiDownloadLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadLinks(requestParameters: DocumentsApiDownloadLinksRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeDocumentResponse> {
            return localVarFp.downloadLinks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete specific document from the employee\'s shared folder.
         * @param {DocumentsApiRemoveEmployeeSharedDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployeeSharedDocument(requestParameters: DocumentsApiRemoveEmployeeSharedDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeEmployeeSharedDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a file to the employee\'s confidential folder.
         * @param {DocumentsApiUploadConfidentialFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadConfidentialFile(requestParameters: DocumentsApiUploadConfidentialFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadConfidentialFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a document to the employee\'s confidential folder
         * @param {DocumentsApiUploadToConfidentialFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadToConfidentialFolder(requestParameters: DocumentsApiUploadToConfidentialFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadToConfidentialFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a document to the employee\'s shared folder
         * @param {DocumentsApiUploadToSharedFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadToSharedFolder(requestParameters: DocumentsApiUploadToSharedFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadToSharedFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a file to the employee\'s shared folder.
         * @param {DocumentsApiUploadToSharedFolder0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadToSharedFolder_1(requestParameters: DocumentsApiUploadToSharedFolder0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadToSharedFolder_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteEmployeeConfidentialDoc operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDeleteEmployeeConfidentialDocRequest
 */
export type DocumentsApiDeleteEmployeeConfidentialDocRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof DocumentsApiDeleteEmployeeConfidentialDoc
    */
    readonly id: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DocumentsApiDeleteEmployeeConfidentialDoc
    */
    readonly docId: string
    
}

/**
 * Request parameters for downloadLinks operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDownloadLinksRequest
 */
export type DocumentsApiDownloadLinksRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof DocumentsApiDownloadLinks
    */
    readonly id: string
    
}

/**
 * Request parameters for removeEmployeeSharedDocument operation in DocumentsApi.
 * @export
 * @interface DocumentsApiRemoveEmployeeSharedDocumentRequest
 */
export type DocumentsApiRemoveEmployeeSharedDocumentRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof DocumentsApiRemoveEmployeeSharedDocument
    */
    readonly id: string
    
    /**
    * Document ID.
    * @type {string}
    * @memberof DocumentsApiRemoveEmployeeSharedDocument
    */
    readonly docId: string
    
}

/**
 * Request parameters for uploadConfidentialFile operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUploadConfidentialFileRequest
 */
export type DocumentsApiUploadConfidentialFileRequest = {
    
    /**
    * employee id
    * @type {string}
    * @memberof DocumentsApiUploadConfidentialFile
    */
    readonly id: string
    
    /**
    * The file to upload.
    * @type {Uint8Array | File | buffer.File}
    * @memberof DocumentsApiUploadConfidentialFile
    */
    readonly file: Uint8Array | File | buffer.File
    
} & DocumentsUploadConfidentialFileRequest

/**
 * Request parameters for uploadToConfidentialFolder operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUploadToConfidentialFolderRequest
 */
export type DocumentsApiUploadToConfidentialFolderRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof DocumentsApiUploadToConfidentialFolder
    */
    readonly id: string
    
} & AddDocument

/**
 * Request parameters for uploadToSharedFolder operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUploadToSharedFolderRequest
 */
export type DocumentsApiUploadToSharedFolderRequest = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof DocumentsApiUploadToSharedFolder
    */
    readonly id: string
    
} & AddDocument

/**
 * Request parameters for uploadToSharedFolder_1 operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUploadToSharedFolder0Request
 */
export type DocumentsApiUploadToSharedFolder0Request = {
    
    /**
    * Employee ID.
    * @type {string}
    * @memberof DocumentsApiUploadToSharedFolder0
    */
    readonly id: string
    
    /**
    * The file to upload.
    * @type {Uint8Array | File | buffer.File}
    * @memberof DocumentsApiUploadToSharedFolder0
    */
    readonly file: Uint8Array | File | buffer.File
    
} & DocumentsUploadToSharedFolderRequest

/**
 * DocumentsApiGenerated - object-oriented interface
 * @export
 * @class DocumentsApiGenerated
 * @extends {BaseAPI}
 */
export class DocumentsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Delete a specific document from the employee\'s confidential folder.
     * @param {DocumentsApiDeleteEmployeeConfidentialDocRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public deleteEmployeeConfidentialDoc(requestParameters: DocumentsApiDeleteEmployeeConfidentialDocRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).deleteEmployeeConfidentialDoc(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of documents and download links.<br />
     * @summary Download employee\'s documents
     * @param {DocumentsApiDownloadLinksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public downloadLinks(requestParameters: DocumentsApiDownloadLinksRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).downloadLinks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete specific document from the employee\'s shared folder.
     * @param {DocumentsApiRemoveEmployeeSharedDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public removeEmployeeSharedDocument(requestParameters: DocumentsApiRemoveEmployeeSharedDocumentRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).removeEmployeeSharedDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a file to the employee\'s confidential folder.
     * @param {DocumentsApiUploadConfidentialFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public uploadConfidentialFile(requestParameters: DocumentsApiUploadConfidentialFileRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).uploadConfidentialFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a document to the employee\'s confidential folder
     * @param {DocumentsApiUploadToConfidentialFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public uploadToConfidentialFolder(requestParameters: DocumentsApiUploadToConfidentialFolderRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).uploadToConfidentialFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a document to the employee\'s shared folder
     * @param {DocumentsApiUploadToSharedFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public uploadToSharedFolder(requestParameters: DocumentsApiUploadToSharedFolderRequest, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).uploadToSharedFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a file to the employee\'s shared folder.
     * @param {DocumentsApiUploadToSharedFolder0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiGenerated
     */
    public uploadToSharedFolder_1(requestParameters: DocumentsApiUploadToSharedFolder0Request, options?: AxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).uploadToSharedFolder_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
