/* tslint:disable */
/* eslint-disable */
/*
Bob API

Access your employees data with the Bob API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateFieldRequest } from '../models';
// @ts-ignore
import { CustomTableMetadata } from '../models';
// @ts-ignore
import { CustomTableMetadataList } from '../models';
// @ts-ignore
import { Field } from '../models';
// @ts-ignore
import { FieldId } from '../models';
// @ts-ignore
import { FlatListItemId } from '../models';
// @ts-ignore
import { List } from '../models';
// @ts-ignore
import { NewListItem } from '../models';
// @ts-ignore
import { ObjectsMetadata } from '../models';
// @ts-ignore
import { UpdateFieldRequest } from '../models';
// @ts-ignore
import { UpdateListItemRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new field.
         * @param {CreateFieldRequest} body The field to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewField: async (body: CreateFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addNewField', 'body', body)
            const localVarPath = `/company/people/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/people/fields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new item to an existing list.
         * @param {string} listName The internal name of the list.
         * @param {NewListItem} body The &lt;b&gt;parentId&lt;/b&gt; attribute is optional and only applies to hierarchy lists. When &lt;b&gt;parentId&lt;/b&gt; is specified, the newly created list item will be placed under the specific hierarchy parent node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewItemToNamedList: async (listName: string, body: NewListItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listName' is not null or undefined
            assertParamExists('addNewItemToNamedList', 'listName', listName)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addNewItemToNamedList', 'body', body)
            const localVarPath = `/company/named-lists/{listName}`
                .replace(`{${"listName"}}`, encodeURIComponent(String(listName !== undefined ? listName : `-listName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/named-lists/{listName}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing field.
         * @param {string} fieldId The ID of the field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField: async (fieldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldId' is not null or undefined
            assertParamExists('deleteField', 'fieldId', fieldId)
            const localVarPath = `/company/people/fields/{fieldId}`
                .replace(`{${"fieldId"}}`, encodeURIComponent(String(fieldId !== undefined ? fieldId : `-fieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/people/fields/{fieldId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an item from an existing list.
         * @param {string} listName The internal name of the list.
         * @param {string} itemId The ID of the list item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemFromCompanyNamedList: async (listName: string, itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listName' is not null or undefined
            assertParamExists('deleteItemFromCompanyNamedList', 'listName', listName)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteItemFromCompanyNamedList', 'itemId', itemId)
            const localVarPath = `/company/named-lists/{listName}/{itemId}`
                .replace(`{${"listName"}}`, encodeURIComponent(String(listName !== undefined ? listName : `-listName-`)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId !== undefined ? itemId : `-itemId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/named-lists/{listName}/{itemId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all company fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company/people/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/people/fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all company lists
         * @param {boolean} [includeArchived] Whether to include archived items in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyNamedLists: async (includeArchived?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company/named-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (includeArchived !== undefined) {
                localVarQueryParameter['includeArchived'] = includeArchived;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/named-lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read metadata of custom tables defined
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomTableMetadata: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/people/custom-tables/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/custom-tables/metadata',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific company list by name.
         * @param {string} listName The internal name of the list.
         * @param {boolean} [includeArchived] Whether to include archived items in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamedList: async (listName: string, includeArchived?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listName' is not null or undefined
            assertParamExists('getNamedList', 'listName', listName)
            const localVarPath = `/company/named-lists/{listName}`
                .replace(`{${"listName"}}`, encodeURIComponent(String(listName !== undefined ? listName : `-listName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (includeArchived !== undefined) {
                localVarQueryParameter['includeArchived'] = includeArchived;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/named-lists/{listName}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all fields of object type position.<br/>
         * @summary Get all positions fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionFields: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/metadata/objects/position',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read metadata for specific custom table
         * @param {string} customTableId The ID of custom table.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableDetails: async (customTableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customTableId' is not null or undefined
            assertParamExists('getTableDetails', 'customTableId', customTableId)
            const localVarPath = `/people/custom-tables/metadata/{custom_table_id}`
                .replace(`{${"custom_table_id"}}`, encodeURIComponent(String(customTableId !== undefined ? customTableId : `-custom_table_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/custom-tables/metadata/{custom_table_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing field
         * @param {string} fieldId The ID of the field.
         * @param {UpdateFieldRequest} body The new name and/or description of the updated field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField: async (fieldId: string, body: UpdateFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldId' is not null or undefined
            assertParamExists('updateField', 'fieldId', fieldId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateField', 'body', body)
            const localVarPath = `/company/people/fields/{fieldId}`
                .replace(`{${"fieldId"}}`, encodeURIComponent(String(fieldId !== undefined ? fieldId : `-fieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/people/fields/{fieldId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing item from a list.
         * @param {string} listName The internal name of the list.
         * @param {string} itemId The ID of the list item.
         * @param {UpdateListItemRequest} body You need to provide at least one of: &lt;b&gt;name&lt;/b&gt; or &lt;b&gt;parentId&lt;/b&gt;. Providing a name will rename the list item value. Providing the parent ID will move the hierarchy list item (together with its children) under the indicated parent node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemFromNamedList: async (listName: string, itemId: string, body: UpdateListItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listName' is not null or undefined
            assertParamExists('updateItemFromNamedList', 'listName', listName)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateItemFromNamedList', 'itemId', itemId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateItemFromNamedList', 'body', body)
            const localVarPath = `/company/named-lists/{listName}/{itemId}`
                .replace(`{${"listName"}}`, encodeURIComponent(String(listName !== undefined ? listName : `-listName-`)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId !== undefined ? itemId : `-itemId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/company/named-lists/{listName}/{itemId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new field.
         * @param {MetadataApiAddNewFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewField(requestParameters: MetadataApiAddNewFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FieldId>> {
            const body: CreateFieldRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                category: requestParameters.category,
                type: requestParameters.type,
                historical: requestParameters.historical
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewField(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a new item to an existing list.
         * @param {MetadataApiAddNewItemToNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewItemToNamedList(requestParameters: MetadataApiAddNewItemToNamedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlatListItemId>> {
            const body: NewListItem = {
                name: requestParameters.name,
                parentId: requestParameters.parentId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewItemToNamedList(requestParameters.listName, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing field.
         * @param {MetadataApiDeleteFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteField(requestParameters: MetadataApiDeleteFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteField(requestParameters.fieldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an item from an existing list.
         * @param {MetadataApiDeleteItemFromCompanyNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItemFromCompanyNamedList(requestParameters: MetadataApiDeleteItemFromCompanyNamedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemFromCompanyNamedList(requestParameters.listName, requestParameters.itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all company fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Field>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all company lists
         * @param {MetadataApiGetCompanyNamedListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyNamedLists(requestParameters: MetadataApiGetCompanyNamedListsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<List>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyNamedLists(requestParameters.includeArchived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read metadata of custom tables defined
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomTableMetadata(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomTableMetadataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomTableMetadata(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific company list by name.
         * @param {MetadataApiGetNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamedList(requestParameters: MetadataApiGetNamedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<List>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNamedList(requestParameters.listName, requestParameters.includeArchived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all fields of object type position.<br/>
         * @summary Get all positions fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositionFields(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectsMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositionFields(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read metadata for specific custom table
         * @param {MetadataApiGetTableDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTableDetails(requestParameters: MetadataApiGetTableDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomTableMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTableDetails(requestParameters.customTableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing field
         * @param {MetadataApiUpdateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateField(requestParameters: MetadataApiUpdateFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: UpdateFieldRequest = {
                description: requestParameters.description,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateField(requestParameters.fieldId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing item from a list.
         * @param {MetadataApiUpdateItemFromNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemFromNamedList(requestParameters: MetadataApiUpdateItemFromNamedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: UpdateListItemRequest = {
                name: requestParameters.name,
                parentId: requestParameters.parentId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemFromNamedList(requestParameters.listName, requestParameters.itemId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new field.
         * @param {MetadataApiAddNewFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewField(requestParameters: MetadataApiAddNewFieldRequest, options?: AxiosRequestConfig): AxiosPromise<FieldId> {
            return localVarFp.addNewField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new item to an existing list.
         * @param {MetadataApiAddNewItemToNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewItemToNamedList(requestParameters: MetadataApiAddNewItemToNamedListRequest, options?: AxiosRequestConfig): AxiosPromise<FlatListItemId> {
            return localVarFp.addNewItemToNamedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing field.
         * @param {MetadataApiDeleteFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField(requestParameters: MetadataApiDeleteFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an item from an existing list.
         * @param {MetadataApiDeleteItemFromCompanyNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItemFromCompanyNamedList(requestParameters: MetadataApiDeleteItemFromCompanyNamedListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteItemFromCompanyNamedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all company fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFields(options?: AxiosRequestConfig): AxiosPromise<Array<Field>> {
            return localVarFp.getCompanyFields(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all company lists
         * @param {MetadataApiGetCompanyNamedListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyNamedLists(requestParameters: MetadataApiGetCompanyNamedListsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<List>> {
            return localVarFp.getCompanyNamedLists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read metadata of custom tables defined
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomTableMetadata(options?: AxiosRequestConfig): AxiosPromise<CustomTableMetadataList> {
            return localVarFp.getCustomTableMetadata(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific company list by name.
         * @param {MetadataApiGetNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamedList(requestParameters: MetadataApiGetNamedListRequest, options?: AxiosRequestConfig): AxiosPromise<List> {
            return localVarFp.getNamedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all fields of object type position.<br/>
         * @summary Get all positions fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionFields(options?: AxiosRequestConfig): AxiosPromise<ObjectsMetadata> {
            return localVarFp.getPositionFields(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read metadata for specific custom table
         * @param {MetadataApiGetTableDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableDetails(requestParameters: MetadataApiGetTableDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomTableMetadata> {
            return localVarFp.getTableDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing field
         * @param {MetadataApiUpdateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField(requestParameters: MetadataApiUpdateFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing item from a list.
         * @param {MetadataApiUpdateItemFromNamedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemFromNamedList(requestParameters: MetadataApiUpdateItemFromNamedListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateItemFromNamedList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewField operation in MetadataApi.
 * @export
 * @interface MetadataApiAddNewFieldRequest
 */
export type MetadataApiAddNewFieldRequest = {
    
} & CreateFieldRequest

/**
 * Request parameters for addNewItemToNamedList operation in MetadataApi.
 * @export
 * @interface MetadataApiAddNewItemToNamedListRequest
 */
export type MetadataApiAddNewItemToNamedListRequest = {
    
    /**
    * The internal name of the list.
    * @type {string}
    * @memberof MetadataApiAddNewItemToNamedList
    */
    readonly listName: string
    
} & NewListItem

/**
 * Request parameters for deleteField operation in MetadataApi.
 * @export
 * @interface MetadataApiDeleteFieldRequest
 */
export type MetadataApiDeleteFieldRequest = {
    
    /**
    * The ID of the field.
    * @type {string}
    * @memberof MetadataApiDeleteField
    */
    readonly fieldId: string
    
}

/**
 * Request parameters for deleteItemFromCompanyNamedList operation in MetadataApi.
 * @export
 * @interface MetadataApiDeleteItemFromCompanyNamedListRequest
 */
export type MetadataApiDeleteItemFromCompanyNamedListRequest = {
    
    /**
    * The internal name of the list.
    * @type {string}
    * @memberof MetadataApiDeleteItemFromCompanyNamedList
    */
    readonly listName: string
    
    /**
    * The ID of the list item.
    * @type {string}
    * @memberof MetadataApiDeleteItemFromCompanyNamedList
    */
    readonly itemId: string
    
}

/**
 * Request parameters for getCompanyNamedLists operation in MetadataApi.
 * @export
 * @interface MetadataApiGetCompanyNamedListsRequest
 */
export type MetadataApiGetCompanyNamedListsRequest = {
    
    /**
    * Whether to include archived items in the response.
    * @type {boolean}
    * @memberof MetadataApiGetCompanyNamedLists
    */
    readonly includeArchived?: boolean
    
}

/**
 * Request parameters for getNamedList operation in MetadataApi.
 * @export
 * @interface MetadataApiGetNamedListRequest
 */
export type MetadataApiGetNamedListRequest = {
    
    /**
    * The internal name of the list.
    * @type {string}
    * @memberof MetadataApiGetNamedList
    */
    readonly listName: string
    
    /**
    * Whether to include archived items in the response.
    * @type {boolean}
    * @memberof MetadataApiGetNamedList
    */
    readonly includeArchived?: boolean
    
}

/**
 * Request parameters for getTableDetails operation in MetadataApi.
 * @export
 * @interface MetadataApiGetTableDetailsRequest
 */
export type MetadataApiGetTableDetailsRequest = {
    
    /**
    * The ID of custom table.
    * @type {string}
    * @memberof MetadataApiGetTableDetails
    */
    readonly customTableId: string
    
}

/**
 * Request parameters for updateField operation in MetadataApi.
 * @export
 * @interface MetadataApiUpdateFieldRequest
 */
export type MetadataApiUpdateFieldRequest = {
    
    /**
    * The ID of the field.
    * @type {string}
    * @memberof MetadataApiUpdateField
    */
    readonly fieldId: string
    
} & UpdateFieldRequest

/**
 * Request parameters for updateItemFromNamedList operation in MetadataApi.
 * @export
 * @interface MetadataApiUpdateItemFromNamedListRequest
 */
export type MetadataApiUpdateItemFromNamedListRequest = {
    
    /**
    * The internal name of the list.
    * @type {string}
    * @memberof MetadataApiUpdateItemFromNamedList
    */
    readonly listName: string
    
    /**
    * The ID of the list item.
    * @type {string}
    * @memberof MetadataApiUpdateItemFromNamedList
    */
    readonly itemId: string
    
} & UpdateListItemRequest

/**
 * MetadataApiGenerated - object-oriented interface
 * @export
 * @class MetadataApiGenerated
 * @extends {BaseAPI}
 */
export class MetadataApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new field.
     * @param {MetadataApiAddNewFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public addNewField(requestParameters: MetadataApiAddNewFieldRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).addNewField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new item to an existing list.
     * @param {MetadataApiAddNewItemToNamedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public addNewItemToNamedList(requestParameters: MetadataApiAddNewItemToNamedListRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).addNewItemToNamedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing field.
     * @param {MetadataApiDeleteFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public deleteField(requestParameters: MetadataApiDeleteFieldRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).deleteField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an item from an existing list.
     * @param {MetadataApiDeleteItemFromCompanyNamedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public deleteItemFromCompanyNamedList(requestParameters: MetadataApiDeleteItemFromCompanyNamedListRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).deleteItemFromCompanyNamedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all company fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getCompanyFields(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getCompanyFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all company lists
     * @param {MetadataApiGetCompanyNamedListsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getCompanyNamedLists(requestParameters: MetadataApiGetCompanyNamedListsRequest = {}, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getCompanyNamedLists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read metadata of custom tables defined
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getCustomTableMetadata(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getCustomTableMetadata(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific company list by name.
     * @param {MetadataApiGetNamedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getNamedList(requestParameters: MetadataApiGetNamedListRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getNamedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all fields of object type position.<br/>
     * @summary Get all positions fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getPositionFields(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getPositionFields(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read metadata for specific custom table
     * @param {MetadataApiGetTableDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getTableDetails(requestParameters: MetadataApiGetTableDetailsRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getTableDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing field
     * @param {MetadataApiUpdateFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public updateField(requestParameters: MetadataApiUpdateFieldRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).updateField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing item from a list.
     * @param {MetadataApiUpdateItemFromNamedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public updateItemFromNamedList(requestParameters: MetadataApiUpdateItemFromNamedListRequest, options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).updateItemFromNamedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
